{"version":3,"sources":["constants/constants.ts","store/search-by/actions.ts","store/search-by/reducer.ts","store/sort-by/reducer.ts","store/sort-by/actions.ts","components/results-amount-controller/results-amount-controller.tsx","store/movies/actions.ts","store/saved-state/actions.ts","store/movies/reducer.ts","store/search-limit/actions.ts","store/search-limit/selectors.ts","store/search-limit/reducer.ts","store/reducers.ts","store/search-by/selectors.ts","store/movies/selectors.ts","services/local-storage-service.ts","services/movies-service.ts","store/movies/sagas.ts","store/router/selectors.ts","store/saved-state/selectors.ts","store/saved-state/sagas.ts","store/actions.ts","store/sagas.ts","store/store.ts","components/header/header.tsx","components/footer/footer.tsx","components/button/button.tsx","components/sort-by/sort-by.tsx","components/title/title.tsx","components/loader/loader.tsx","components/icon/icon.tsx","components/search-result/film-card.tsx","components/search-result/search-result.tsx","components/favorites/favorites.tsx","pages/home/home.tsx","pages/detailed-info/detailed-info.tsx","routes.tsx","App.tsx","index.tsx"],"names":["Common","setSearchBy","createAction","resolve","searchBy","BASE_URL","SortByEnum","initialState","Title","reducer","state","arguments","length","undefined","action","type","getType","actions","payload","setSortBy","sortBy","Amount","Date","setQueryString","queryString","setCurrentMovieId","id","fetchMovies","fetchMoviesSuccess","movies","fetchMoviesFail","fetchMovieById","fetchMovieByIdSuccess","currentMovie","fetchMovieByIdFail","sortByRating","sortByDate","fetchFavoriteMovie","fetchFavoriteMovieSuccess","movieItem","fetchFavoriteMovieFail","removeMovieFromFavorites","rehydrateState","rehydrateStateDone","restoreSavedState","savedState","isFavoriteLoading","isLoading","currentMovieId","favMovies","_action$payload","Object","objectSpread","toConsumableArray","concat","filter","movie","parseInt","sort","a","b","voteAverage","releaseDate","setSearchLimit","limit","selectSearchLimit","createSelector","searchLimit","mapDispatchToProps","connect","props","setAmountItems","e","target","getSingleControl","content","react_default","createElement","onClick","className","cn","single-control-active","ResultsOnPage","ten","twenty","thirty","reducers","moviesState","movieReducer","sortByReducer","searchByReducer","selectSearchBy","selectMovies","selectIsLoading","selectCurrentMovie","selectMoviesQuantity","selectSearchQuery","selectCurrentMovieId","selectFavorites","service","LocalStorageService","localStorage","classCallCheck","this","createClass","key","value","setItem","JSON","stringify","storageData","getItem","parse","window","MoviesService","searchQuery","axios","get","then","response","data","map","title","posterPath","poster_path","release_date","genres","vote_average","tagLine","tagline","runtime","overview","watchFetchMovies","watchFetchMovieById","watchFetchFavMovie","regenerator_default","wrap","_context","prev","next","throttle","stop","_marked","fetchedMovies","_context2","call","delay","select","sent","moviesService","getMovies","put","t0","_marked2","_context3","_marked3","movieId","fetchedMovie","_context4","getMovieById","_marked4","_context5","_marked5","_context6","_marked6","moviesSagas","selectCurrentPath","router","localization","location","pathname","selectRouterSavedState","selectSavedState","watchRehydrateState","watchSaveState","saveState","saveStateActions","LOCATION_CHANGE","SAVE_STATE_THROTTLE","STATE_KEY","takeEvery","sagas_marked","fetchState","push","sagas_marked2","localStorageService","sagas_marked3","sagas_marked4","saveStateAppSagas","init","watchInit","watchInitDone","rootSaga","take","store_sagas_marked","store_sagas_marked2","all","store_sagas_marked3","history","appHistory","createHashHistory","sagaMiddleware","createSagaMiddleware","middleware","routerMiddleware","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","connectRouter","applyMiddleware","apply","run","favorites","moviesCount","_useState","useState","_useState2","slicedToArray","setValue","handleSubmit","onSetSearchBy","setActiveBtn","title_Title","MainTitle","FindYourMovie","onKeyPress","onChange","SearchBy","button_Button","disabled","active-button","name","Genres","Search","Footer","Button","onSetSortBy","setActiveLink","MoviesFound","SortBy","active-link","ReleaseDate","Rating","Loader","Icon","iconPrefix","icon","onIconClick","FilmCard","isMovieInFavorites","some","Link","to","toString","src","alt","onPosterClick","slice","join","icon_Icon","fav","onStarClick","fetchMovie","manageFavorites","movieID","isFavoritesExist","favorite","Fragment","film_card_FilmCard","favorites_Favorites","results_amount_controller_results_amount_controller","Favorites","useEffect","searchResult","search_result_search_result","loader_Loader","header_header","sort_by_sort_by","_props$currentMovie","setPaddingForRating","rating","Number","isInteger","integer-border ","fractional-border","routes","Switch","Route","exact","path","component","Home","DetailedInfo","App","lib","footer_Footer","dispatch","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.b3d9ef4e.chunk.js","sourcesContent":["export const BASE_URL = 'https://react-cdp-api.herokuapp.com/movies';\r\n\r\nexport enum Common {\r\n    MainTitle= 'netflixroulette',\r\n    Search = 'search',\r\n    SearchBy = 'search by',\r\n    SortBy = 'Sort by',\r\n    FindYourMovie = 'find your movie',\r\n    Title = 'title',\r\n    Genres = 'genres',\r\n    ReleaseDate = 'release date',\r\n    Rating = 'rating',\r\n    MoviesFound = ' movies found',\r\n    ResultsOnPage = 'Show results on page: '\r\n}\r\n","import {createAction} from 'typesafe-actions';\r\nimport {SearchBy} from './reducer';\r\n\r\nexport const setSearchBy = createAction(\r\n    'SET_SEARCH_BY',\r\n    resolve => (searchBy: SearchBy) => resolve(searchBy)\r\n);\r\n","import {Reducer} from 'redux';\r\nimport {ActionType, getType} from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\nimport {Common} from '../../constants/constants';\r\n\r\nexport type SearchByAction = ActionType<typeof actions>;\r\nexport type SearchBy = Common.Genres | Common.Title;\r\n\r\nexport const initialState: SearchBy = Common.Title;\r\n\r\nconst reducer: Reducer<string, SearchByAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSearchBy): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import {Reducer} from 'redux';\r\nimport {ActionType, getType} from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\n\r\nexport type SortByAction = ActionType<typeof actions>;\r\n\r\nexport enum SortByEnum {\r\n    Date = 'date',\r\n    Rating = 'rating'\r\n}\r\n\r\nexport const initialState: SortByEnum = SortByEnum.Date;\r\n\r\nconst reducer: Reducer<string, SortByAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSortBy): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nimport {SortByEnum} from './reducer';\r\n\r\nexport const setSortBy = createAction(\r\n    'SET_SORT_BY',\r\n    resolve => (sortBy: SortByEnum) => resolve(sortBy)\r\n);\r\n","import React, {ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {setSearchLimit} from '../../store/search-limit/actions';\r\nimport {fetchMovies} from '../../store/movies/actions';\r\nimport {GlobalState} from '../../store/store';\r\nimport {selectSearchLimit} from '../../store/search-limit/selectors';\r\nimport {Common} from '../../constants/constants';\r\n\r\nimport './results-amount-controller.scss';\r\n\r\ninterface ResultsAmountControllerProps {\r\n    searchLimit: string;\r\n\r\n    setSearchLimit(limit: string): void;\r\n    fetchMovies(): void;\r\n}\r\n\r\nexport enum Amount {\r\n    ten = '10',\r\n    twenty = '20',\r\n    thirty = '30',\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    searchLimit: selectSearchLimit(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setSearchLimit,\r\n    fetchMovies\r\n};\r\n\r\nconst ResultsAmountController = (props: ResultsAmountControllerProps) => {\r\n    const setAmountItems = (e: any) => {\r\n        const {setSearchLimit, fetchMovies, searchLimit} = props;\r\n\r\n        searchLimit !== e.target.id && setSearchLimit(e.target.id) && fetchMovies();\r\n    };\r\n\r\n    const getSingleControl = (content: string): ReactNode => {\r\n        const {searchLimit} = props;\r\n\r\n        return (\r\n            <span id={content}\r\n                  onClick={setAmountItems}\r\n                  className={cn('single-control', {'single-control-active': searchLimit === content})}>\r\n                {content}\r\n            </span>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className='results-amount-controller'>\r\n            <span>{Common.ResultsOnPage}</span>\r\n            {getSingleControl(Amount.ten)}\r\n            {getSingleControl(Amount.twenty)}\r\n            {getSingleControl(Amount.thirty)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ResultsAmountController);\r\n","import {createAction} from 'typesafe-actions';\r\n\r\nimport {MovieItem} from './reducer';\r\n\r\nexport const setQueryString = createAction(\r\n    'SET_QUERY_STRING',\r\n    resolve => (queryString: string) => resolve(queryString)\r\n);\r\n\r\nexport const setCurrentMovieId = createAction(\r\n    'SET_CURRENT_MOVIE_ID',\r\n    resolve => (id: string) => resolve(id)\r\n);\r\n\r\nexport const fetchMovies = createAction('FETCH_MOVIES');\r\n\r\nexport const fetchMoviesSuccess = createAction(\r\n    'FETCH_MOVIES_SUCCESS',\r\n    resolve => (movies: MovieItem[]) => resolve(movies)\r\n);\r\n\r\nexport const fetchMoviesFail = createAction(\r\n    'FETCH_MOVIES_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const fetchMovieById = createAction('FETCH_MOVIE_BY_ID ');\r\n\r\nexport const fetchMovieByIdSuccess = createAction(\r\n    'FETCH_MOVIE_BY_ID_SUCCESS',\r\n    resolve => (currentMovie: MovieItem) => resolve(currentMovie)\r\n);\r\n\r\nexport const fetchMovieByIdFail = createAction(\r\n    'FETCH_MOVIE_BY_ID_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const sortByRating = createAction('SORT_BY_RATING');\r\n\r\nexport const sortByDate = createAction('SORT_BY_DATE');\r\n\r\nexport const fetchFavoriteMovie = createAction('FETCH_FAVORITE_MOVIE');\r\n\r\nexport const fetchFavoriteMovieSuccess = createAction(\r\n    'FETCH_FAVORITE_MOVIE_SUCCESS',\r\n    resolve => (movieItem: MovieItem) => resolve(movieItem)\r\n);\r\n\r\nexport const fetchFavoriteMovieFail = createAction(\r\n    'FETCH_FAVORITE_MOVIE_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const removeMovieFromFavorites = createAction(\r\n    'REMOVE_MOVIE_FROM_FAVORITES',\r\n    resolve => (id: string) => resolve(id)\r\n);","import { createAction } from 'typesafe-actions';\r\n\r\nimport { AppSavedState } from '../store';\r\n\r\nexport const rehydrateState = createAction('REHYDRATE_STATE');\r\n\r\nexport const rehydrateStateDone = createAction('REHYDRATE_STATE_DONE');\r\n\r\nexport const restoreSavedState = createAction(\r\n    'RESTORE_SAVED_STATE',\r\n    resolve => (savedState: AppSavedState) => resolve(savedState)\r\n);","import {Reducer} from 'redux';\r\nimport {ActionType, getType} from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\nimport {restoreSavedState} from \"../saved-state/actions\";\r\n\r\nexport interface MovieItem {\r\n    id?: number;\r\n    title?: string;\r\n    posterPath?: string;\r\n    releaseDate?: string;\r\n    genres?: string[];\r\n    voteAverage?: number;\r\n    tagLine?: string;\r\n    runtime?: number;\r\n    overview?: string;\r\n}\r\n\r\nexport interface MoviesState {\r\n    isFavoriteLoading: boolean;\r\n    isLoading: boolean;\r\n    queryString: string;\r\n    currentMovieId: string;\r\n    movies: MovieItem[];\r\n    favMovies: MovieItem[];\r\n    currentMovie: MovieItem;\r\n}\r\n\r\nexport type MoviesAction =\r\n    | ActionType<typeof actions>\r\n    | ActionType<typeof restoreSavedState>;\r\n\r\nexport const initialState: MoviesState = {\r\n    isFavoriteLoading: false,\r\n    isLoading: false,\r\n    currentMovieId: '',\r\n    queryString: '',\r\n    movies: [],\r\n    favMovies: [],\r\n    currentMovie: {}\r\n};\r\n\r\nconst reducer: Reducer<MoviesState, MoviesAction> = (\r\n    state = initialState,\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n\r\n        case getType(restoreSavedState): {\r\n            const {movies, currentMovie, favMovies} = action.payload;\r\n            return {\r\n                ...state,\r\n                movies: movies || [],\r\n                currentMovie: currentMovie || {},\r\n                favMovies: favMovies || []\r\n            }\r\n        }\r\n\r\n        case getType(actions.setQueryString): {\r\n            return {\r\n                ...state,\r\n                queryString: action.payload\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchFavoriteMovieSuccess): {\r\n            return {\r\n                ...state,\r\n                favMovies: [...state.favMovies, action.payload],\r\n                isFavoriteLoading: false\r\n            }\r\n        }\r\n\r\n        case getType(actions.removeMovieFromFavorites): {\r\n            return {\r\n                ...state,\r\n                favMovies: [\r\n                    ...state.favMovies.filter(movie => movie.id !== parseInt(action.payload))\r\n                ]\r\n            }\r\n        }\r\n\r\n        case getType(actions.setCurrentMovieId): {\r\n            return {\r\n                ...state,\r\n                currentMovieId: action.payload\r\n            }\r\n        }\r\n\r\n        case getType(actions.fetchFavoriteMovie): {\r\n            return {\r\n                ...state,\r\n                isFavoriteLoading: true\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovies):\r\n        case getType(actions.fetchMovieById): {\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMoviesSuccess): {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                movies: action.payload\r\n            };\r\n        }\r\n        case getType(actions.fetchFavoriteMovieFail): {\r\n            return {\r\n                ...state,\r\n                isFavoriteLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovieByIdFail):\r\n        case getType(actions.fetchMoviesFail): {\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovieByIdSuccess): {\r\n            return {\r\n                ...state,\r\n                currentMovie: action.payload,\r\n                isLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.sortByRating): {\r\n            return {\r\n                ...state,\r\n                movies: state.movies.sort((a: any, b: any) => {\r\n                    return a.voteAverage - b.voteAverage;\r\n                })\r\n            };\r\n        }\r\n\r\n        case getType(actions.sortByDate): {\r\n            return {\r\n                ...state,\r\n                movies: state.movies.sort((a: any, b: any) => {\r\n                    return parseInt(b.releaseDate) - parseInt(a.releaseDate);\r\n                })\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nimport {Amount} from '../../components/results-amount-controller/results-amount-controller';\r\n\r\nexport const setSearchLimit= createAction(\r\n    'SET_SEARCH_LIMIT',\r\n    resolve => (limit: Amount) => resolve(limit)\r\n);\r\n","import {createSelector} from 'reselect';\r\n\r\nimport {GlobalState} from '../store';\r\n\r\nconst state = (state: GlobalState) => state;\r\n\r\nexport const selectSearchLimit = createSelector(\r\n    state,\r\n    (state) => state.searchLimit\r\n);\r\n","import {Reducer} from 'redux';\r\nimport {ActionType, getType} from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\nimport {Amount} from '../../components/results-amount-controller/results-amount-controller';\r\n\r\nexport type SearchLimitAction = ActionType<typeof actions>;\r\nexport type SearchLimit = Amount;\r\nexport const initialState: string = Amount.ten;\r\n\r\nconst reducer: Reducer<string, SearchLimitAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSearchLimit): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import searchByReducer from './search-by/reducer';\r\nimport sortByReducer from './sort-by/reducer';\r\nimport movieReducer from './movies/reducer';\r\nimport searchLimitReducer from './search-limit/reducer';\r\n\r\nexport default {\r\n    moviesState: movieReducer,\r\n    sortBy: sortByReducer,\r\n    searchBy: searchByReducer,\r\n    searchLimit: searchLimitReducer\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nimport { GlobalState } from '../store';\r\n\r\nconst state = (state: GlobalState) => state;\r\n\r\nexport const selectSearchBy = createSelector(\r\n    state,\r\n    (state) => state.searchBy\r\n);\r\n","import {createSelector} from 'reselect';\r\n\r\nimport {GlobalState} from '../store';\r\n\r\nexport const moviesState = (state: GlobalState) => state.moviesState;\r\n\r\nexport const selectMovies = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.movies\r\n);\r\n\r\nexport const selectIsLoading = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.isLoading\r\n);\r\n\r\nexport const selectCurrentMovie = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.currentMovie\r\n);\r\n\r\nexport const selectMoviesQuantity = createSelector(\r\n    [selectMovies],\r\n    movies => movies.length\r\n);\r\n\r\nexport const selectSearchQuery = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.queryString\r\n);\r\n\r\nexport const selectCurrentMovieId = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.currentMovieId\r\n);\r\n\r\nexport const selectFavorites = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.favMovies\r\n);\r\n","export class LocalStorageService {\r\n    constructor(private localStorage: Storage) {}\r\n\r\n    setItem(key: string, value: object) {\r\n        this.localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    getItem(key: string) {\r\n        const storageData = this.localStorage.getItem(key);\r\n\r\n        return storageData ? JSON.parse(storageData) : null;\r\n    }\r\n}\r\n\r\nconst service = new LocalStorageService(window.localStorage);\r\n\r\nexport default service;","import axios from 'axios';\r\n\r\nimport {BASE_URL} from '../constants/constants';\r\nimport {MovieItem} from \"../store/movies/reducer\";\r\n\r\nexport class MoviesService {\r\n\r\n    getMovies(searchQuery: string, searchBy: string, limit: string) {\r\n        return axios.get(`${BASE_URL}?search=${searchQuery}&searchBy=${searchBy}&limit=${limit}`)\r\n            .then((response): MovieItem[] => {\r\n                return response.data.data.map(\r\n                    (movie: any): MovieItem => {\r\n                        return {\r\n                            title: movie.title,\r\n                            id: movie.id,\r\n                            posterPath: movie.poster_path,\r\n                            releaseDate: movie.release_date,\r\n                            genres: movie.genres,\r\n                            voteAverage: movie.vote_average\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n    }\r\n\r\n    getMovieById(id: number) {\r\n        return axios.get(`${BASE_URL}/${id}`)\r\n            .then((response) => {\r\n                return response.data = {\r\n                    title: response.data.title,\r\n                    id: response.data.id,\r\n                    posterPath: response.data.poster_path,\r\n                    releaseDate: response.data.release_date,\r\n                    genres: response.data.genres,\r\n                    voteAverage: response.data.vote_average,\r\n                    tagLine: response.data.tagline,\r\n                    runtime: response.data.runtime,\r\n                    overview: response.data.overview,\r\n\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nconst service = new MoviesService();\r\n\r\nexport default service;\r\n","import {call, put, select, throttle} from 'redux-saga/effects';\r\nimport {delay} from 'redux-saga';\r\nimport {getType} from 'typesafe-actions';\r\n\r\n\r\nimport * as actions from './actions';\r\nimport {selectSearchBy} from '../search-by/selectors';\r\nimport {selectCurrentMovieId, selectSearchQuery} from './selectors';\r\nimport {selectSearchLimit} from '../search-limit/selectors';\r\nimport {moviesService} from \"../../services\";\r\n\r\nexport function* watchFetchMovies() {\r\n    yield throttle(1000, getType(actions.fetchMovies), fetchMovies);\r\n}\r\n\r\nexport function* fetchMovies() {\r\n    yield call(delay, 1000);\r\n    try {\r\n        const searchQuery = yield select(selectSearchQuery);\r\n        const searchBy = yield select(selectSearchBy);\r\n        const limit = yield select(selectSearchLimit);\r\n        const fetchedMovies = yield call([moviesService, moviesService.getMovies], searchQuery, searchBy, limit);\r\n        yield put(actions.fetchMoviesSuccess(fetchedMovies));\r\n    } catch (error) {\r\n        yield put(actions.fetchMoviesFail(error));\r\n    }\r\n}\r\n\r\nexport function* watchFetchMovieById() {\r\n    yield throttle(1000, getType(actions.fetchMovieById), fetchMovieById);\r\n}\r\n\r\nexport function* fetchMovieById() {\r\n    try {\r\n        const movieId = yield select(selectCurrentMovieId);\r\n        const fetchedMovie = yield call([moviesService, moviesService.getMovieById], movieId);\r\n        yield put(actions.fetchMovieByIdSuccess(fetchedMovie));\r\n    } catch (error) {\r\n        yield put(actions.fetchMovieByIdFail(error));\r\n    }\r\n}\r\n\r\nexport function* watchFetchFavMovie() {\r\n    yield throttle(1000, getType(actions.fetchFavoriteMovie), fetchFavoriteMovie);\r\n}\r\n\r\nexport function* fetchFavoriteMovie() {\r\n    try {\r\n        const movieId = yield select(selectCurrentMovieId);\r\n        const fetchedMovie = yield call([moviesService, moviesService.getMovieById], movieId);\r\n        yield put(actions.fetchFavoriteMovieSuccess(fetchedMovie));\r\n    } catch (error) {\r\n        yield put(actions.fetchFavoriteMovieFail(error));\r\n    }\r\n}\r\n\r\nexport const moviesSagas = [\r\n    watchFetchMovies(),\r\n    watchFetchMovieById(),\r\n    watchFetchFavMovie()\r\n];\r\n","import { createSelector } from 'reselect';\r\nimport {GlobalState} from \"../store\";\r\nimport { RouterSavedState } from './types';\r\n\r\nconst slice = (state: GlobalState) => state.router;\r\n\r\nexport const selectCurrentPath = createSelector(\r\n    [slice],\r\n    localization => localization.location.pathname\r\n);\r\n\r\nexport const selectRouterSavedState = createSelector(\r\n    selectCurrentPath,\r\n    (pathname): RouterSavedState => ({ location: { pathname } })\r\n);","import {createSelector} from 'reselect';\r\nimport {selectRouterSavedState} from \"../router/selectors\";\r\nimport {selectCurrentMovie, selectFavorites, selectMovies} from \"../movies/selectors\";\r\n\r\nexport const selectSavedState = createSelector(\r\n    [selectRouterSavedState, selectCurrentMovie, selectMovies, selectFavorites],\r\n    (router, currentMovie, movies, favMovies) => ({\r\n        router, currentMovie, movies, favMovies\r\n    })\r\n);","import {\r\n    call,\r\n    put,\r\n    select,\r\n    takeEvery,\r\n    throttle\r\n} from 'redux-saga/effects';\r\nimport {getType} from 'typesafe-actions';\r\nimport {LOCATION_CHANGE, push} from 'connected-react-router';\r\n\r\nimport * as actions from './actions';\r\nimport {AppSavedState} from \"../store\";\r\nimport {localStorageService} from \"../../services\";\r\nimport {selectSavedState} from \"./selectors\";\r\nimport {\r\n    fetchFavoriteMovieSuccess,\r\n    fetchMovieByIdSuccess,\r\n    fetchMovies,\r\n    removeMovieFromFavorites\r\n} from \"../movies/actions\";\r\n\r\nexport const saveStateActions: string[] = [\r\n    LOCATION_CHANGE,\r\n    getType(fetchMovieByIdSuccess),\r\n    getType(fetchFavoriteMovieSuccess),\r\n    getType(removeMovieFromFavorites),\r\n    getType(fetchMovies)\r\n];\r\n\r\nconst SAVE_STATE_THROTTLE = 500;\r\nconst STATE_KEY = 'MOVIES_state';\r\n\r\n// Restore state\r\n\r\nexport function* watchRehydrateState() {\r\n    yield takeEvery(getType(actions.rehydrateState), rehydrateState);\r\n}\r\n\r\nexport function* rehydrateState() {\r\n    const state: AppSavedState = yield call(fetchState);\r\n    if (state) {\r\n        if (state.router) {\r\n            yield put(push(state.router.location.pathname))\r\n        }\r\n        yield put(actions.restoreSavedState(state));\r\n    }\r\n\r\n    yield put(actions.rehydrateStateDone());\r\n}\r\n\r\nconst fetchState = () => localStorageService.getItem(STATE_KEY);\r\n\r\n// Saving state\r\n\r\nexport function* watchSaveState() {\r\n    yield throttle(SAVE_STATE_THROTTLE, saveStateActions, saveState);\r\n}\r\n\r\nexport function* saveState() {\r\n    const savedState = yield select(selectSavedState);\r\n\r\n    yield call([localStorageService, localStorageService.setItem],\r\n        STATE_KEY,\r\n        savedState)\r\n}\r\n\r\nexport const saveStateAppSagas = [\r\n    watchSaveState(),\r\n    watchRehydrateState()\r\n];\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nexport * from './movies/actions';\r\nexport * from './sort-by/actions';\r\nexport * from './search-by/actions';\r\n\r\n\r\nexport const init = createAction('INIT');","import {all, put, take} from 'redux-saga/effects';\r\n\r\nimport {moviesSagas} from './movies/sagas';\r\nimport {saveStateAppSagas} from './saved-state/sagas';\r\nimport {getType} from \"typesafe-actions\";\r\nimport {init} from \"./actions\";\r\nimport {rehydrateState, rehydrateStateDone} from \"./saved-state/actions\";\r\n\r\n/**\r\n * Rehydrate store\r\n */\r\nexport function* watchInit() {\r\n    yield take(getType(init));\r\n\r\n    yield put(rehydrateState());\r\n}\r\n\r\n/**\r\n * Act when store is initialized\r\n */\r\nexport function* watchInitDone() {\r\n    yield take(getType(rehydrateStateDone));\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        ...moviesSagas,\r\n        ...saveStateAppSagas,\r\n        watchInit(),\r\n        watchInitDone()\r\n    ]);\r\n}\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { createHashHistory, History } from 'history';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport {MovieItem, MoviesState} from './movies/reducer';\r\nimport reducers from './reducers';\r\nimport rootSaga from './sagas';\r\nimport {RouterSavedState} from './router/types';\r\nimport {SearchBy} from './search-by/reducer';\r\nimport {Amount} from '../components/results-amount-controller/results-amount-controller';\r\nimport {SortByEnum} from \"./sort-by/reducer\";\r\n\r\nexport interface Router {\r\n    action: string;\r\n    location: {\r\n        hash: string;\r\n        pathname: string;\r\n        search: string;\r\n        state: any;\r\n    };\r\n}\r\n\r\nexport interface AppSavedState {\r\n    router?: RouterSavedState;\r\n    favMovies?: MovieItem[];\r\n    currentMovie?: MovieItem;\r\n    movies?: MovieItem[];\r\n}\r\n\r\nexport interface GlobalState extends AppSavedState{\r\n    moviesState: MoviesState;\r\n    searchBy: SearchBy;\r\n    sortBy: SortByEnum;\r\n    searchLimit: Amount;\r\n    router: Router\r\n}\r\n\r\nexport const appHistory = createHashHistory();\r\n\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware: any[] = [sagaMiddleware, routerMiddleware(appHistory)];\r\n\r\nexport const rootReducer = (history: History) =>\r\n    combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\nconst composeEnhancer: typeof compose =\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer(appHistory),\r\n    composeEnhancer(applyMiddleware(...middleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {Common} from '../../constants/constants';\r\nimport {appHistory, GlobalState} from '../../store/store';\r\nimport {fetchMovies, setQueryString, setSearchBy} from '../../store/actions';\r\nimport {Button, Title} from '..';\r\nimport {selectFavorites, selectMoviesQuantity} from '../../store/movies/selectors';\r\nimport {MovieItem} from '../../store/movies/reducer';\r\n\r\nimport './header.scss';\r\n\r\nexport interface HeaderProps {\r\n    searchBy: string,\r\n    isLoading: boolean;\r\n    favorites: MovieItem[];\r\n\r\n    fetchMovies(): void,\r\n    setSearchBy(payload: string): void,\r\n    setQueryString(payload: string): void,\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    searchBy: state.searchBy,\r\n    favorites: selectFavorites(state),\r\n    isLoading: state.moviesState.isLoading,\r\n    moviesCount: selectMoviesQuantity(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovies,\r\n    setSearchBy,\r\n    setQueryString\r\n};\r\n\r\nconst Header = (props: HeaderProps) => {\r\n    const {setQueryString, fetchMovies, isLoading, setSearchBy} = props;\r\n    const state: string = '';\r\n    const [value, setValue] = useState(state);\r\n\r\n    const handleChange = (e: any) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const submitEvent = (e: any) => {\r\n        e.key === 'Enter' && handleSubmit();\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        appHistory.push(`/search/:${value}`);\r\n        setQueryString(value);\r\n        fetchMovies();\r\n    };\r\n\r\n    const onSetSearchBy = (e: any) => {\r\n        setSearchBy(e.target.value);\r\n    };\r\n\r\n    const setActiveBtn = (searchBy: string) => {\r\n        return searchBy === props.searchBy;\r\n    };\r\n\r\n    return <div className='header column'>\r\n        <Title className='header__title' title={Common.MainTitle}/>\r\n        <span className='header__find_your'>{Common.FindYourMovie}</span>\r\n        <input className='header__search-input'\r\n               type='search'\r\n               onKeyPress={submitEvent}\r\n               value={value}\r\n               onChange={handleChange}/>\r\n        <div className='header__controls row'>\r\n            <div className='header__controls__left'>\r\n                <span>{Common.SearchBy}</span>\r\n                <Button value={Common.Title}\r\n                        onClick={onSetSearchBy}\r\n                        type='button'\r\n                        disabled={setActiveBtn(Common.Title)}\r\n                        className={cn('btn', {'active-button': setActiveBtn(Common.Title)})}\r\n                        name={Common.Title}/>\r\n                <Button value={Common.Genres}\r\n                        onClick={onSetSearchBy}\r\n                        type='button'\r\n                        disabled={setActiveBtn(Common.Genres)}\r\n                        className={cn('btn', {'active-button': setActiveBtn(Common.Genres)})}\r\n                        name={Common.Genres}/>\r\n            </div>\r\n            <Button className='header__controls__search-button btn'\r\n                    onClick={handleSubmit}\r\n                    disabled={isLoading}\r\n                    type='submit'\r\n                    name={Common.Search}/>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Header);\r\n","import React from 'react';\r\n\r\nimport {Common} from '../../constants/constants';\r\n\r\nimport './footer.scss';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n            <span>{Common.MainTitle}</span>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\n\r\ntype ButtonType = 'button' | 'reset' | 'submit';\r\n\r\ninterface ButtonProps {\r\n    className?: string;\r\n    name?: string;\r\n    onClick?: any;\r\n    value?: string;\r\n    type: ButtonType;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n    return (\r\n        <button { ...props } >\r\n            { props.name }\r\n        </button>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {Common} from '../../constants/constants';\r\nimport {GlobalState} from '../../store/store';\r\nimport {selectMoviesQuantity} from '../../store/movies/selectors';\r\nimport {setSortBy, sortByDate, sortByRating} from '../../store/actions';\r\nimport {SortByEnum} from '../../store/sort-by/reducer';\r\n\r\nimport './sort-by.scss';\r\n\r\ninterface SortByProps {\r\n    moviesCount: number;\r\n    sortBy: string;\r\n\r\n    setSortBy(payload: string): void;\r\n    sortByRating(): void;\r\n    sortByDate(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    moviesCount: selectMoviesQuantity(state),\r\n    sortBy: state.sortBy\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setSortBy,\r\n    sortByRating,\r\n    sortByDate\r\n};\r\n\r\nconst SortBy = (props: SortByProps) => {\r\n    const {moviesCount, setSortBy, sortByDate, sortByRating} = props;\r\n\r\n    const onSetSortBy = (e: any) => {\r\n        e.target.id === 'rating'\r\n            ? sortByRating()\r\n            : sortByDate();\r\n\r\n        setSortBy(e.target.id);\r\n    };\r\n\r\n    const setActiveLink = (sortBy: string) => {\r\n        return sortBy === props.sortBy;\r\n    };\r\n\r\n    return (\r\n        <div className='sort-by row'>\r\n            <span>{moviesCount}{Common.MoviesFound}</span>\r\n            <div className='row sort-by__buttons'>\r\n                <span>{Common.SortBy}</span>\r\n                <span id='date'\r\n                      className={cn('link', {'active-link': setActiveLink(SortByEnum.Date)})}\r\n                      onClick={onSetSortBy}>{Common.ReleaseDate}</span>\r\n                <span id='rating'\r\n                      className={cn('link', {'active-link': setActiveLink(SortByEnum.Rating)})}\r\n                      onClick={onSetSortBy}>{Common.Rating}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SortBy);\r\n","import React from 'react';\r\n\r\ninterface TitleProps {\r\n    className: string;\r\n    title: string;\r\n}\r\n\r\nexport const Title = (props: TitleProps) => {\r\n    return <span { ...props }>{ props.title }</span>;\r\n};\r\n\r\n","import React from 'react';\r\n\r\nimport './loader.scss'\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className='loading-div'>\r\n            <p className='loading'/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { IconName } from '@fortawesome/fontawesome-common-types';\r\n\r\nexport type IconPrefix = | 'fa' | 'fas' | 'far';\r\n\r\ninterface IconProps {\r\n    className?: string;\r\n    id?: string;\r\n    title?: string;\r\n    icon: IconName;\r\n    iconPrefix: IconPrefix;\r\n    onIconClick?: any;\r\n}\r\n\r\nexport const Icon = (props: IconProps) => {\r\n    return (\r\n        <i className={ `${ props.className }  ${ props.iconPrefix } fa-${ props.icon }` }\r\n           title={props.title}\r\n           id={ props.id }\r\n           onClick={ props.onIconClick }/>\r\n    );\r\n};","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport cn from 'classnames';\r\n\r\nimport {MovieItem} from '../../store/movies/reducer';\r\nimport {Icon} from \"..\";\r\nimport {IconPrefix} from \"../icon/icon\";\r\n\r\ninterface FilmCardProps {\r\n    movie: MovieItem;\r\n    favorites: MovieItem[];\r\n\r\n    onPosterClick(e: any): void;\r\n    onStarClick(id: string): void;\r\n}\r\n\r\nexport const FilmCard = (props: FilmCardProps) => {\r\n    const isMovieInFavorites: boolean = props.favorites.some(movie => movie.id === props.movie.id);\r\n    const iconPrefix: IconPrefix = isMovieInFavorites\r\n        ? 'fas'\r\n        : 'far';\r\n\r\n    return (\r\n        <div className='search-result__movie-card column'>\r\n            <Link to={`/movie/${props.movie.id}`}>\r\n                <img className='search-result__movie-card__poster'\r\n                     id={props.movie.id!.toString()}\r\n                     src={props.movie.posterPath}\r\n                     alt={props.movie.title}\r\n                     onClick={props.onPosterClick}/>\r\n            </Link>\r\n            <div className='search-result__movie-card__header row'>\r\n                <span className='search-result__movie-card__title'>{props.movie.title}</span>\r\n                <span className='search-result__movie-card__date'>{props.movie.releaseDate!.slice(0, 4)}</span>\r\n            </div>\r\n            <div className='search-result__movie-card__header row'>\r\n                <span className='search-result__movie-card__genres'>{props.movie.genres!.join(' & ')}</span>\r\n                <Icon className={cn('search-result__movie-card__favorite', {'fav': isMovieInFavorites})}\r\n                      id={props.movie.id!.toString()}\r\n                      iconPrefix={iconPrefix} icon='star'\r\n                      onIconClick={props.onStarClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {MovieItem} from '../../store/movies/reducer';\r\nimport {FilmCard} from './film-card';\r\nimport {Favorites, ResultsAmountController} from '..';\r\nimport {\r\n    fetchFavoriteMovie,\r\n    fetchMovieById,\r\n    removeMovieFromFavorites,\r\n    setCurrentMovieId\r\n} from '../../store/movies/actions';\r\nimport {GlobalState} from \"../../store/store\";\r\nimport {selectFavorites} from \"../../store/movies/selectors\";\r\n\r\nimport './search-result.scss';\r\n\r\ninterface SearchResultProps {\r\n    movies: MovieItem[];\r\n    favorites: MovieItem[];\r\n\r\n    fetchMovieById(): void\r\n    setCurrentMovieId(id: string): void;\r\n    fetchFavoriteMovie(): void;\r\n    removeMovieFromFavorites(id: string): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    favorites: selectFavorites(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovieById,\r\n    setCurrentMovieId,\r\n    fetchFavoriteMovie,\r\n    removeMovieFromFavorites\r\n};\r\n\r\nconst SearchResult = (props: SearchResultProps) => {\r\n    const {\r\n        setCurrentMovieId,\r\n        fetchMovieById,\r\n        movies,\r\n        favorites,\r\n        removeMovieFromFavorites,\r\n        fetchFavoriteMovie,\r\n    } = props;\r\n\r\n    const fetchMovie = (e: any) => {\r\n        setCurrentMovieId(e.target.id);\r\n        fetchMovieById();\r\n    };\r\n\r\n    const manageFavorites = (e: any) => {\r\n        const movieID = e.target.id;\r\n        const isFavoritesExist: boolean = favorites.some(\r\n            favorite => favorite.id === parseInt(movieID, 10)\r\n        );\r\n        setCurrentMovieId(e.target.id);\r\n        !isFavoritesExist\r\n            ? fetchFavoriteMovie()\r\n            : removeMovieFromFavorites(movieID);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='search-result-wrapper row'>\r\n                <div className='search-result row'> {\r\n                    movies.map(\r\n                        movie => (\r\n                            <FilmCard\r\n                                key={movie.id}\r\n                                movie={movie}\r\n                                onPosterClick={fetchMovie}\r\n                                onStarClick={manageFavorites}\r\n                                favorites={favorites}/>\r\n                        )\r\n                    )\r\n                }\r\n                </div>\r\n                <Favorites fetchFavoriteMovie={fetchMovie} favorites={favorites}/>\r\n            </div>\r\n            <ResultsAmountController/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchResult);\r\n","import React from 'react';\r\n\r\nimport {MovieItem} from '../../store/movies/reducer';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport './favorites.scss';\r\n\r\ninterface FavoritesProps {\r\n    favorites?: MovieItem[];\r\n\r\n    fetchFavoriteMovie(e: any): void;\r\n}\r\n\r\nexport const Favorites = (props: FavoritesProps) => {\r\n    return(\r\n        <div className='favorites'>\r\n            {\r\n                props.favorites && props.favorites.map(favorite => (\r\n                    <div key={favorite.id} className='favorites__item'>\r\n                        <Link to={`/movie/${favorite.id}`}>\r\n                            <img className='favorites__item__poster'\r\n                                 id={favorite.id!.toString()}\r\n                                 src={favorite.posterPath}\r\n                                 alt={favorite.title}\r\n                                 onClick={props.fetchFavoriteMovie}/>\r\n                        </Link>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};","import React, {useEffect, ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {GlobalState} from '../../store/store';\r\nimport {fetchMovies} from '../../store/movies/actions';\r\nimport {selectIsLoading, selectMovies} from '../../store/selectors';\r\nimport {Header, SortBy, Loader, SearchResult} from '../../components';\r\nimport {MovieItem} from '../../store/movies/reducer';\r\n\r\ninterface HomeProps {\r\n    movies: MovieItem[];\r\n    isLoading: boolean;\r\n\r\n    fetchMovies(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    movies: selectMovies(state),\r\n    isLoading: selectIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovies\r\n};\r\n\r\nconst Home = (props: HomeProps) => {\r\n    const {fetchMovies, movies, isLoading} = props;\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [!movies]);\r\n\r\n    const searchResult: ReactNode = (\r\n        movies.length\r\n            ? <SearchResult movies={movies}/>\r\n            : < div className='no-films-found'><h1> No films found</h1></div>\r\n    );\r\n\r\n    const content: ReactNode = (\r\n        isLoading\r\n            ? <Loader/>\r\n            : searchResult\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <SortBy/>\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);\r\n","import React, {ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {appHistory, GlobalState} from '../../store/store';\r\nimport {selectCurrentMovie, selectFavorites, selectIsLoading, selectMovies} from '../../store/movies/selectors';\r\nimport {Button, Icon, Loader, SearchResult, Title} from '../../components';\r\nimport {Common} from '../../constants/constants';\r\nimport {MovieItem} from '../../store/movies/reducer';\r\nimport {IconPrefix} from '../../components/icon/icon';\r\nimport {\r\n    fetchFavoriteMovieSuccess,\r\n    removeMovieFromFavorites\r\n} from '../../store/movies/actions';\r\n\r\nimport './detailed-info.scss';\r\n\r\ninterface DetailedInfoProps {\r\n    favorites: MovieItem[];\r\n    currentMovie: MovieItem,\r\n    movies: MovieItem[];\r\n    isLoading: boolean;\r\n\r\n    fetchFavoriteMovieSuccess(movie: MovieItem): void,\r\n    removeMovieFromFavorites(id: string): void\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    currentMovie: selectCurrentMovie(state),\r\n    movies: selectMovies(state),\r\n    favorites: selectFavorites(state),\r\n    isLoading: selectIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchFavoriteMovieSuccess,\r\n    removeMovieFromFavorites\r\n};\r\n\r\nconst DetailedInfo = (props: DetailedInfoProps) => {\r\n    const {posterPath, title, voteAverage, tagLine, releaseDate, runtime, overview, id} = props.currentMovie;\r\n    const {movies, isLoading, favorites, fetchFavoriteMovieSuccess, removeMovieFromFavorites} = props;\r\n    const isMovieInFavorites: boolean = favorites.some(movie => movie.id === props.currentMovie.id);\r\n    const iconPrefix: IconPrefix = isMovieInFavorites\r\n        ? 'fas'\r\n        : 'far';\r\n    const setPaddingForRating = (rating: any) => {\r\n        return Number.isInteger(rating);\r\n    };\r\n\r\n    const toSearch = () => {\r\n        appHistory.push(`/`);\r\n    };\r\n\r\n    const searchResult: ReactNode = (\r\n        isLoading\r\n            ? <Loader/>\r\n            : <SearchResult movies={movies}/>\r\n    );\r\n    const manageFavorites = () => {\r\n        const isFavoritesExist: boolean = favorites.some(\r\n            favorite => favorite.id === id\r\n        );\r\n        !isFavoritesExist\r\n            ? fetchFavoriteMovieSuccess(props.currentMovie)\r\n            : removeMovieFromFavorites(id!.toString());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='detailed-info column'>\r\n                <div className='detailed-info__top row'>\r\n                    <Title className='detailed-info__top__title' title={Common.MainTitle}/>\r\n                    <Button type='button'\r\n                            name={Common.Search}\r\n                            className='btn detailed-info__top__to-search'\r\n                            onClick={toSearch}/>\r\n                </div>\r\n                <div className='detailed-info__film row'>\r\n                    <img className='detailed-info__film__poster' src={posterPath} alt={title}/>\r\n                    <div className='detailed-info__film__right column'>\r\n                        <div className='detailed-info__film__right__title-rating row'>\r\n                            <span className='detailed-info__film__right__title-rating__title'>{title}</span>\r\n                            <Icon className={cn('search-result__movie-card__favorite', {'fav': isMovieInFavorites})}\r\n                                  id={id!.toString()}\r\n                                  iconPrefix={iconPrefix} icon='star'\r\n                                  onIconClick={manageFavorites}/>\r\n                            <span className={cn('detailed-info__film__right__title-rating__rating',\r\n                                {\r\n                                    'integer-border ': setPaddingForRating(voteAverage),\r\n                                    'fractional-border': !setPaddingForRating(voteAverage)\r\n                                }\r\n                            )}>\r\n                                {voteAverage}\r\n                                </span>\r\n                        </div>\r\n                        <span className='detailed-info__film__right__tagline'>{tagLine}</span>\r\n                        <div className='detailed-info__film__right__date-runtime row'>\r\n                                <span\r\n                                    className='detailed-info__film__right__date-runtime__date'>\r\n                                    {releaseDate && releaseDate.slice(0, 4)}\r\n                                </span>\r\n                            <span className='detailed-info__film__right__date-runtime__runtime'>\r\n                                    {runtime} min\r\n                                </span>\r\n                        </div>\r\n                        <span className='detailed-info__film__right__overview'>{overview}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {searchResult}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DetailedInfo);\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\n\r\nimport { Home, DetailedInfo } from './pages';\r\n\r\nconst routes = (\r\n    <div>\r\n        <Switch>\r\n            <Route exact path='/' component={ Home }/>\r\n            <Route path='/search/:searchQuery' component={ Home }/>\r\n            <Route path='/movie/:id' component={ DetailedInfo }/>\r\n        </Switch>\r\n    </div>\r\n);\r\n\r\nexport default routes;\r\n","import {ConnectedRouter} from 'connected-react-router';\r\nimport React from 'react';\r\n\r\nimport {Footer} from './components';\r\nimport {appHistory} from './store/store';\r\nimport routes from './routes';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className='app'>\r\n            <ConnectedRouter history={appHistory}>{routes}</ConnectedRouter>\r\n            <Footer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './store/store';\r\nimport App from './App';\r\nimport { init } from './store/actions';\r\n\r\nimport './index.scss';\r\n\r\nstore.dispatch(init());\r\n\r\nReactDOM.render(\r\n    <Provider store={ store }>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}