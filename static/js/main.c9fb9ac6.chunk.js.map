{"version":3,"sources":["constants/constants.ts","store/search-by/actions.ts","store/search-by/reducer.ts","store/sort-by/reducer.ts","store/sort-by/actions.ts","store/search-limit/reducer.ts","store/movies/actions.ts","store/saved-state/actions.ts","store/movies/helpers.ts","store/movies/reducer.ts","store/search-limit/actions.ts","services/translation-service.ts","services/movies-service.ts","services/local-storage-service.ts","store/language/actions.ts","store/language/reducer.ts","store/reducers.ts","store/search-by/selectors.ts","store/movies/selectors.ts","store/search-limit/selectors.ts","store/movies/sagas.ts","store/language/selectors.ts","store/router/selectors.ts","store/saved-state/selectors.ts","store/saved-state/sagas.ts","store/actions.ts","store/sagas.ts","store/store.ts","components/movies-list/movies-list.tsx","components/lang-panel/lang-panel.tsx","components/movies-list/film-card.tsx","store/sort-by/selectors.ts","components/results-amount/results-amount.tsx","components/sort-by/sort-by.tsx","components/loader/loader.tsx","components/header/header.tsx","components/button/button.tsx","components/icon/icon.tsx","components/favorite-icon/favorite-icon.tsx","pages/home/search-component.tsx","pages/home/home.tsx","pages/detailed-info/rating.tsx","pages/detailed-info/detailed-info.tsx","routes.tsx","App.tsx","index.tsx"],"names":["Common","setSearchBy","createAction","resolve","searchBy","BASE_URL","SortByEnum","initialState","Title","reducer","state","arguments","length","undefined","action","type","getType","actions","payload","setSortBy","sortBy","Amount","Date","setQueryString","queryString","setCurrentMovieId","id","fetchMovies","fetchMoviesSuccess","movies","fetchMoviesFail","fetchMovieById","fetchMovieByIdSuccess","currentMovie","fetchMovieByIdFail","sortByRating","tab","sortByDate","fetchFavoriteMovie","fetchFavoriteMovieSuccess","movieItem","fetchFavoriteMovieFail","removeMovieFromFavorites","rehydrateState","rehydrateStateDone","restoreSavedState","savedState","Object","objectSpread","sort","a","b","parseInt","releaseDate","favMovies","voteAverage","isFavoriteLoading","isLoading","currentMovieId","_action$payload","toConsumableArray","concat","filter","movie","setSearchLimit","limit","Languages","ten","DEFAULT_LANGUAGE","en","i18n","service","MoviesService","classCallCheck","this","createClass","key","value","searchQuery","axios","get","then","response","data","map","title","posterPath","poster_path","release_date","genres","vote_average","tagLine","tagline","runtime","overview","voteCount","vote_count","LocalStorageService","localStorage","setItem","JSON","stringify","storageData","getItem","parse","window","setLanguage","language","reducers","moviesState","movieReducer","sortByReducer","searchByReducer","searchLimit","searchLimitReducer","selectSearchBy","createSelector","selectMovies","selectFavorites","selectIsLoading","selectCurrentMovie","selectMoviesQuantity","selectFavMoviesQuantity","favs","selectSearchQuery","selectCurrentMovieId","selectIsFavMoviesNearRelease","some","favItem","moment","toDate","getFullYear","selectSearchLimit","watchFetchMovies","watchFetchMovieById","watchFetchFavMovie","regenerator_default","wrap","_context","prev","next","throttle","stop","_marked","fetchedMovies","_context2","call","delay","select","sent","moviesService","getMovies","put","t0","_marked2","_context3","_marked3","movieId","fetchedMovie","_context4","getMovieById","_marked4","_context5","_marked5","_context6","_marked6","moviesSagas","selectLanguage","selectCurrentPath","router","localization","location","pathname","selectRouterSavedState","selectSavedState","watchRehydrateState","watchSaveState","saveState","saveStateActions","LOCATION_CHANGE","SAVE_STATE_THROTTLE","STATE_KEY","takeEvery","sagas_marked","fetchState","push","sagas_marked2","localStorageService","sagas_marked3","sagas_marked4","saveStateAppSagas","init","watchInit","watchInitDone","rootSaga","take","store_sagas_marked","store_sagas_marked2","all","store_sagas_marked3","history","appHistory","createHashHistory","sagaMiddleware","createSagaMiddleware","middleware","routerMiddleware","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","connectRouter","applyMiddleware","apply","run","Tabs","mapDispatchToProps","connect","props","t","useTranslation","changeLanguage","e","target","reload","react_default","createElement","className","onClick","cn","active","ru","FilmCard","onStarClick","favorites","onPosterClick","isFavoritesTab","isReleaseCurrentYear","releaseWarn","toString","src","alt","release-soon","slice","join","favorite_icon_FavoriteIcon","manageFavorites","selectSortBy","moviesQuantity","favMoviesQuantity","isFavMoviesNearRelease","_useState","useState","_useState2","slicedToArray","setActiveTab","isSearchResultsTab","isFavoritesAvailable","isDetailedPage","includes","fetchMovie","movieID","isFavoritesExist","favorite","handleTabs","getList","moviesList","loader_Loader","film_card_FilmCard","sort_by_sort_by","favTab","active-button","icon_Icon","iconPrefix","icon","Fragment","search-results-detailed","setAmountItems","getSingleControl","content","single-control-active","twenty","thirty","onSetSortBy","Rating","setActiveLink","active-link","Loader","Header","backIcon","onIconClick","lang_panel_lang_panel","Button","name","Icon","FavoriteIcon","isMovieInFavorites","fav","moviesCount","setValue","onSetSearchBy","setActiveBtn","handleSubmit","placeholder","onKeyPress","onChange","button_Button","disabled-btn","disabled","results_amount_results_amount","useEffect","home_search_component","setPaddingForRating","rating","Number","isInteger","integer-border ","fractional-border","rating_Rating","routes","Switch","Route","exact","path","component","Home","DetailedInfo","header_Header","lib","movies_list_movies_list","loader","dispatch","use","Backend","initReactI18next","lng","fallbackLng","whitelist","load","debug","process","REACT_APP_I18N_DEBUG","interpolation","escapeValue","backend","loadPath","getState","ReactDOM","render","es","react","fallback","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.c9fb9ac6.chunk.js","sourcesContent":["export const BASE_URL = 'https://react-cdp-api.herokuapp.com/movies';\r\n\r\nexport enum Common {\r\n    MainTitle = 'netflixroulette',\r\n    Search = 'search',\r\n    SearchBy = 'search by',\r\n    SortBy = 'Sort by',\r\n    FindYourMovie = 'find your movie',\r\n    Title = 'title',\r\n    Genres = 'genres',\r\n    ReleaseDate = 'release date',\r\n    Rating = 'rating',\r\n    MoviesFound = ' movies found',\r\n    ResultsOnPage = 'Show results on page: '\r\n}\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nexport const setSearchBy = createAction(\r\n    'SET_SEARCH_BY',\r\n    resolve => (searchBy: string) => resolve(searchBy)\r\n);\r\n","import { Reducer } from 'redux';\r\nimport { ActionType, getType } from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\nimport { Common } from '../../constants/constants';\r\n\r\nexport type SearchByAction = ActionType<typeof actions>;\r\nexport type SearchBy = 'genres' | 'title';\r\n\r\nexport const initialState: SearchBy = Common.Title;\r\n\r\nconst reducer: Reducer<string, SearchByAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSearchBy): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { Reducer } from 'redux';\r\nimport { ActionType, getType } from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\n\r\nexport type SortByAction = ActionType<typeof actions>;\r\n\r\nexport enum SortByEnum {\r\n    Date = 'date',\r\n    Rating = 'rating'\r\n}\r\n\r\nexport const initialState: SortByEnum = SortByEnum.Date;\r\n\r\nconst reducer: Reducer<string, SortByAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSortBy): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nimport { SortByEnum } from './reducer';\r\n\r\nexport const setSortBy = createAction(\r\n    'SET_SORT_BY',\r\n    resolve => (sortBy: SortByEnum) => resolve(sortBy)\r\n);\r\n","import {Reducer} from 'redux';\r\nimport {ActionType, getType} from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\n\r\nexport enum Amount {\r\n    ten = '10',\r\n    twenty = '20',\r\n    thirty = '30',\r\n}\r\n\r\nexport type SearchLimitAction = ActionType<typeof actions>;\r\nexport type SearchLimit = Amount;\r\nexport const initialState: string = Amount.ten;\r\n\r\nconst reducer: Reducer<string, SearchLimitAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSearchLimit): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nimport { MovieItem } from './reducer';\r\n\r\nexport const setQueryString = createAction(\r\n    'SET_QUERY_STRING',\r\n    resolve => (queryString: string) => resolve(queryString)\r\n);\r\n\r\nexport const setCurrentMovieId = createAction(\r\n    'SET_CURRENT_MOVIE_ID',\r\n    resolve => (id: string) => resolve(id)\r\n);\r\n\r\nexport const fetchMovies = createAction('FETCH_MOVIES');\r\n\r\nexport const fetchMoviesSuccess = createAction(\r\n    'FETCH_MOVIES_SUCCESS',\r\n    resolve => (movies: MovieItem[]) => resolve(movies)\r\n);\r\n\r\nexport const fetchMoviesFail = createAction(\r\n    'FETCH_MOVIES_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const fetchMovieById = createAction('FETCH_MOVIE_BY_ID ');\r\n\r\nexport const fetchMovieByIdSuccess = createAction(\r\n    'FETCH_MOVIE_BY_ID_SUCCESS',\r\n    resolve => (currentMovie: MovieItem) => resolve(currentMovie)\r\n);\r\n\r\nexport const fetchMovieByIdFail = createAction(\r\n    'FETCH_MOVIE_BY_ID_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const sortByRating = createAction(\r\n    'SORT_BY_RATING',\r\n    resolve => (tab: string) => resolve(tab)\r\n);\r\n\r\nexport const sortByDate = createAction(\r\n    'SORT_BY_DATE',\r\n    resolve => (tab: string) => resolve(tab)\r\n);\r\n\r\nexport const fetchFavoriteMovie = createAction('FETCH_FAVORITE_MOVIE');\r\n\r\nexport const fetchFavoriteMovieSuccess = createAction(\r\n    'FETCH_FAVORITE_MOVIE_SUCCESS',\r\n    resolve => (movieItem: MovieItem) => resolve(movieItem)\r\n);\r\n\r\nexport const fetchFavoriteMovieFail = createAction(\r\n    'FETCH_FAVORITE_MOVIE_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const removeMovieFromFavorites = createAction(\r\n    'REMOVE_MOVIE_FROM_FAVORITES',\r\n    resolve => (id: string) => resolve(id)\r\n);\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nimport { AppSavedState } from './interfaces';\r\n\r\nexport const rehydrateState = createAction('REHYDRATE_STATE');\r\n\r\nexport const rehydrateStateDone = createAction('REHYDRATE_STATE_DONE');\r\n\r\nexport const restoreSavedState = createAction(\r\n    'RESTORE_SAVED_STATE',\r\n    resolve => (savedState: AppSavedState) => resolve(savedState)\r\n);\r\n","import { MovieItem, MoviesState } from './reducer';\r\n\r\nexport const sortBy = (state: MoviesState, tab: string, sortBy: string) => {\r\n    return sortBy === 'date'\r\n        ? tab === 'movies'\r\n            ? {\r\n                ...state,\r\n                movies: state.movies.sort((a: MovieItem, b: MovieItem) => {\r\n                    return parseInt(b.releaseDate!) - parseInt(a.releaseDate!);\r\n                })\r\n            }\r\n            : {\r\n                ...state,\r\n                favMovies: state.favMovies.sort((a: MovieItem, b: MovieItem) => {\r\n                    return parseInt(b.releaseDate!) - parseInt(a.releaseDate!);\r\n                })\r\n            }\r\n        : tab === 'movies'\r\n            ? {\r\n                ...state,\r\n                movies: state.movies.sort((a: MovieItem, b: MovieItem) => {\r\n                    return b.voteAverage! - a.voteAverage!;\r\n                })\r\n            }\r\n            : {\r\n                ...state,\r\n                favMovies: state.favMovies.sort((a: MovieItem, b: MovieItem) => {\r\n                    return b.voteAverage! - a.voteAverage!;\r\n                })\r\n            }\r\n};\r\n","import { Reducer } from 'redux';\r\nimport { ActionType, getType } from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\nimport { restoreSavedState } from '../saved-state/actions';\r\nimport { sortBy } from './helpers';\r\n\r\nexport interface MovieItem {\r\n    id?: number;\r\n    title?: string;\r\n    posterPath?: string;\r\n    releaseDate?: string;\r\n    genres?: string[];\r\n    voteAverage?: number;\r\n    tagLine?: string;\r\n    runtime?: number;\r\n    overview?: string;\r\n    voteCount?: number;\r\n}\r\n\r\nexport interface MoviesState {\r\n    isFavoriteLoading: boolean;\r\n    isLoading: boolean;\r\n    queryString: string;\r\n    currentMovieId: string;\r\n    movies: MovieItem[];\r\n    favMovies: MovieItem[];\r\n    currentMovie: MovieItem;\r\n}\r\n\r\nexport type MoviesAction =\r\n    | ActionType<typeof actions>\r\n    | ActionType<typeof restoreSavedState>;\r\n\r\nexport const initialState: MoviesState = {\r\n    isFavoriteLoading: false,\r\n    isLoading: false,\r\n    currentMovieId: '',\r\n    queryString: '',\r\n    movies: [],\r\n    favMovies: [],\r\n    currentMovie: {}\r\n};\r\n\r\nconst reducer: Reducer<MoviesState, MoviesAction> = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case getType(restoreSavedState): {\r\n            const { movies, currentMovie, favMovies } = action.payload;\r\n            return {\r\n                ...state,\r\n                movies: movies || [],\r\n                currentMovie: currentMovie || {},\r\n                favMovies: favMovies || []\r\n            }\r\n        }\r\n\r\n        case getType(actions.setQueryString): {\r\n            return {\r\n                ...state,\r\n                queryString: action.payload\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchFavoriteMovieSuccess): {\r\n            return {\r\n                ...state,\r\n                favMovies: [...state.favMovies, action.payload],\r\n                isFavoriteLoading: false\r\n            }\r\n        }\r\n\r\n        case getType(actions.removeMovieFromFavorites): {\r\n            return {\r\n                ...state,\r\n                favMovies: [\r\n                    ...state.favMovies.filter(movie => movie.id !== parseInt(action.payload))\r\n                ]\r\n            }\r\n        }\r\n\r\n        case getType(actions.setCurrentMovieId): {\r\n            return {\r\n                ...state,\r\n                currentMovieId: action.payload\r\n            }\r\n        }\r\n\r\n        case getType(actions.fetchFavoriteMovie): {\r\n            return {\r\n                ...state,\r\n                isFavoriteLoading: true\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovies):\r\n        case getType(actions.fetchMovieById): {\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMoviesSuccess): {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                movies: action.payload\r\n            };\r\n        }\r\n        case getType(actions.fetchFavoriteMovieFail): {\r\n            return {\r\n                ...state,\r\n                isFavoriteLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovieByIdFail):\r\n        case getType(actions.fetchMoviesFail): {\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovieByIdSuccess): {\r\n            return {\r\n                ...state,\r\n                currentMovie: action.payload,\r\n                isLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.sortByRating): {\r\n            return sortBy(state, action.payload, 'rating');\r\n        }\r\n\r\n        case getType(actions.sortByDate): {\r\n            return sortBy(state, action.payload, 'date');\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n\r\n","import { createAction } from 'typesafe-actions';\r\nimport { Amount } from './reducer';\r\n\r\n\r\nexport const setSearchLimit = createAction(\r\n    'SET_SEARCH_LIMIT',\r\n    resolve => (limit: Amount) => resolve(limit)\r\n);\r\n","import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\n\r\nexport enum Languages {\r\n    en = 'en-US',\r\n    ru = 'ru-RU'\r\n}\r\n\r\nconst DEFAULT_LANGUAGE = Languages.en;\r\n\r\nexport function initTranslationService() {\r\n    i18n\r\n        .use(Backend)\r\n        .use(initReactI18next) // passes i18n down to react-i18next\r\n        .init({\r\n            lng: DEFAULT_LANGUAGE,\r\n\r\n            fallbackLng: DEFAULT_LANGUAGE,\r\n\r\n            whitelist: [Languages.en, Languages.ru],\r\n\r\n            load: 'currentOnly',\r\n\r\n            debug: !!process.env.REACT_APP_I18N_DEBUG,\r\n\r\n            interpolation: {\r\n                escapeValue: false // react already safes from xss\r\n            },\r\n\r\n            backend: {\r\n                loadPath: 'locales/{{lng}}.json'\r\n            }\r\n        });\r\n    return i18n;\r\n}\r\n\r\nexport default i18n;\r\n","import axios from 'axios';\r\n\r\nimport { BASE_URL } from '../constants/constants';\r\nimport { MovieItem } from '../store/movies/reducer';\r\n\r\nexport class MoviesService {\r\n\r\n    getMovies(searchQuery: string, searchBy: string, limit: string) {\r\n        return axios.get(`${ BASE_URL }?search=${ searchQuery }&searchBy=${ searchBy }&limit=${ limit }`)\r\n            .then((response): MovieItem[] => {\r\n                return response.data.data.map(\r\n                    (movie: any): MovieItem => {\r\n                        return {\r\n                            title: movie.title,\r\n                            id: movie.id,\r\n                            posterPath: movie.poster_path,\r\n                            releaseDate: movie.release_date,\r\n                            genres: movie.genres,\r\n                            voteAverage: movie.vote_average\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n    }\r\n\r\n    getMovieById(id: number) {\r\n        return axios.get(`${ BASE_URL }/${ id }`)\r\n            .then(response => {\r\n                return response.data = {\r\n                    title: response.data.title,\r\n                    id: response.data.id,\r\n                    posterPath: response.data.poster_path,\r\n                    releaseDate: response.data.release_date,\r\n                    genres: response.data.genres,\r\n                    voteAverage: response.data.vote_average,\r\n                    tagLine: response.data.tagline,\r\n                    runtime: response.data.runtime,\r\n                    overview: response.data.overview,\r\n                    voteCount: response.data.vote_count\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nconst service = new MoviesService();\r\n\r\nexport default service;\r\n","export class LocalStorageService {\r\n    constructor(private localStorage: Storage) {\r\n    }\r\n\r\n    setItem(key: string, value: object) {\r\n        this.localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    getItem(key: string) {\r\n        const storageData = this.localStorage.getItem(key);\r\n\r\n        return storageData ? JSON.parse(storageData) : null;\r\n    }\r\n}\r\n\r\nconst service = new LocalStorageService(window.localStorage);\r\n\r\nexport default service;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nexport const setLanguage = createAction(\r\n    'SET_LANGUAGE',\r\n    resolve => (language: string) => resolve(language)\r\n);\r\n","import { Reducer } from 'redux';\r\nimport { ActionType, getType } from 'typesafe-actions';\r\n\r\nimport { Languages } from '../../services';\r\nimport { restoreSavedState } from '../saved-state/actions';\r\nimport * as actions from './actions';\r\n\r\nexport type LanguageAction =\r\n    | ActionType<typeof actions>\r\n    | ActionType<typeof restoreSavedState>;\r\n\r\nexport const initialState: string = Languages.en;\r\n\r\nconst reducer: Reducer<string, LanguageAction> = (state = initialState, action) => {\r\n        switch (action.type) {\r\n\r\n            case getType(actions.setLanguage): {\r\n                return action.payload;\r\n            }\r\n\r\n            case getType(restoreSavedState): {\r\n                return action.payload.language;\r\n            }\r\n\r\n            default: {\r\n                return state;\r\n            }\r\n        }\r\n    }\r\n;\r\n\r\nexport default reducer;\r\n","import searchByReducer from './search-by/reducer';\r\nimport sortByReducer from './sort-by/reducer';\r\nimport movieReducer from './movies/reducer';\r\nimport searchLimitReducer from './search-limit/reducer';\r\nimport languageStateReducer from './language/reducer';\r\n\r\nexport default {\r\n    moviesState: movieReducer,\r\n    sortBy: sortByReducer,\r\n    searchBy: searchByReducer,\r\n    searchLimit: searchLimitReducer,\r\n    language: languageStateReducer\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nimport { GlobalState } from '../interfaces';\r\n\r\nconst state = (state: GlobalState) => state;\r\n\r\nexport const selectSearchBy = createSelector(\r\n    state,\r\n    (state) => state.searchBy\r\n);\r\n","import { createSelector } from 'reselect';\r\nimport moment from 'moment';\r\n\r\nimport { GlobalState } from '../interfaces';\r\n\r\nexport const moviesState = (state: GlobalState) => state.moviesState;\r\n\r\nexport const selectMovies = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.movies\r\n);\r\n\r\nexport const selectFavorites = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.favMovies\r\n);\r\n\r\nexport const selectIsLoading = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.isLoading\r\n);\r\n\r\nexport const selectCurrentMovie = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.currentMovie\r\n);\r\n\r\nexport const selectMoviesQuantity = createSelector(\r\n    [selectMovies],\r\n    movies => movies.length\r\n);\r\n\r\nexport const selectFavMoviesQuantity = createSelector(\r\n    [selectFavorites],\r\n    favs => favs.length\r\n);\r\n\r\nexport const selectSearchQuery = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.queryString\r\n);\r\n\r\nexport const selectCurrentMovieId = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.currentMovieId\r\n);\r\n\r\nexport const selectIsFavMoviesNearRelease = createSelector(\r\n    [selectFavorites],\r\n    favs => favs.some(\r\n        favItem => moment(favItem.releaseDate).toDate().getFullYear() === moment().toDate().getFullYear()\r\n    )\r\n);\r\n","import { createSelector } from 'reselect';\r\n\r\nimport { GlobalState } from '../interfaces';\r\n\r\nconst state = (state: GlobalState) => state;\r\n\r\nexport const selectSearchLimit = createSelector(\r\n    state,\r\n    (state) => state.searchLimit\r\n);\r\n","import { call, put, select, throttle } from 'redux-saga/effects';\r\nimport { delay } from 'redux-saga';\r\nimport { getType } from 'typesafe-actions';\r\n\r\n\r\nimport * as actions from './actions';\r\nimport { selectSearchBy } from '../search-by/selectors';\r\nimport { selectCurrentMovieId, selectSearchQuery } from './selectors';\r\nimport { selectSearchLimit } from '../search-limit/selectors';\r\nimport { moviesService } from '../../services';\r\n\r\nexport function* watchFetchMovies() {\r\n    yield throttle(1000, getType(actions.fetchMovies), fetchMovies);\r\n}\r\n\r\nexport function* fetchMovies() {\r\n    yield call(delay, 1000);\r\n    try {\r\n        const searchQuery = yield select(selectSearchQuery);\r\n        const searchBy = yield select(selectSearchBy);\r\n        const limit = yield select(selectSearchLimit);\r\n        const fetchedMovies = yield call([moviesService, moviesService.getMovies], searchQuery, searchBy, limit);\r\n        yield put(actions.fetchMoviesSuccess(fetchedMovies));\r\n    } catch (error) {\r\n        yield put(actions.fetchMoviesFail(error));\r\n    }\r\n}\r\n\r\nexport function* watchFetchMovieById() {\r\n    yield throttle(1000, getType(actions.fetchMovieById), fetchMovieById);\r\n}\r\n\r\nexport function* fetchMovieById() {\r\n    try {\r\n        const movieId = yield select(selectCurrentMovieId);\r\n        const fetchedMovie = yield call([moviesService, moviesService.getMovieById], movieId);\r\n        yield put(actions.fetchMovieByIdSuccess(fetchedMovie));\r\n    } catch (error) {\r\n        yield put(actions.fetchMovieByIdFail(error));\r\n    }\r\n}\r\n\r\nexport function* watchFetchFavMovie() {\r\n    yield throttle(1000, getType(actions.fetchFavoriteMovie), fetchFavoriteMovie);\r\n}\r\n\r\nexport function* fetchFavoriteMovie() {\r\n    try {\r\n        const movieId = yield select(selectCurrentMovieId);\r\n        const fetchedMovie = yield call([moviesService, moviesService.getMovieById], movieId);\r\n        yield put(actions.fetchFavoriteMovieSuccess(fetchedMovie));\r\n    } catch (error) {\r\n        yield put(actions.fetchFavoriteMovieFail(error));\r\n    }\r\n}\r\n\r\nexport const moviesSagas = [\r\n    watchFetchMovies(),\r\n    watchFetchMovieById(),\r\n    watchFetchFavMovie()\r\n];\r\n","import { GlobalState } from '../interfaces';\r\n\r\nexport const selectLanguage = (state: GlobalState) => state.language;\r\n","import { createSelector } from 'reselect';\r\n\r\nimport { RouterSavedState } from './types';\r\nimport { GlobalState } from '../interfaces';\r\n\r\nconst slice = (state: GlobalState) => state.router;\r\n\r\nexport const selectCurrentPath = createSelector(\r\n    [slice],\r\n    localization => localization.location.pathname\r\n);\r\n\r\nexport const selectRouterSavedState = createSelector(\r\n    selectCurrentPath,\r\n    (pathname): RouterSavedState => ({ location: { pathname } })\r\n);\r\n","import { createSelector } from 'reselect';\r\nimport { selectLanguage } from '../language/selectors';\r\nimport { selectRouterSavedState } from '../router/selectors';\r\nimport { selectCurrentMovie, selectFavorites, selectMovies } from '../movies/selectors';\r\n\r\nexport const selectSavedState = createSelector(\r\n    [selectRouterSavedState, selectCurrentMovie, selectMovies, selectFavorites, selectLanguage],\r\n    (router, currentMovie, movies, favMovies, language) => ({\r\n        router, currentMovie, movies, favMovies, language\r\n    })\r\n);\r\n","import {\r\n    call,\r\n    put,\r\n    select,\r\n    takeEvery,\r\n    throttle\r\n} from 'redux-saga/effects';\r\nimport { getType } from 'typesafe-actions';\r\nimport { LOCATION_CHANGE, push } from 'connected-react-router';\r\n\r\nimport { setLanguage } from '../language/actions';\r\nimport * as actions from './actions';\r\nimport { localStorageService } from '../../services';\r\nimport { selectSavedState } from './selectors';\r\nimport {\r\n    fetchFavoriteMovieSuccess,\r\n    fetchMovieByIdSuccess,\r\n    fetchMovies,\r\n    removeMovieFromFavorites\r\n} from '../movies/actions';\r\nimport { AppSavedState } from './interfaces';\r\n\r\nexport const saveStateActions: string[] = [\r\n    LOCATION_CHANGE,\r\n    getType(fetchMovieByIdSuccess),\r\n    getType(fetchFavoriteMovieSuccess),\r\n    getType(removeMovieFromFavorites),\r\n    getType(fetchMovies),\r\n    getType(setLanguage)\r\n];\r\n\r\nconst SAVE_STATE_THROTTLE = 500;\r\nconst STATE_KEY = 'MOVIES_state';\r\n\r\n// Restore state\r\n\r\nexport function* watchRehydrateState() {\r\n    yield takeEvery(getType(actions.rehydrateState), rehydrateState);\r\n}\r\n\r\nexport function* rehydrateState() {\r\n    const state: AppSavedState = yield call(fetchState);\r\n    if(state) {\r\n        if(state.router) {\r\n            yield put(push(state.router.location.pathname))\r\n        }\r\n        yield put(actions.restoreSavedState(state));\r\n    }\r\n\r\n    yield put(actions.rehydrateStateDone());\r\n}\r\n\r\nconst fetchState = () => localStorageService.getItem(STATE_KEY);\r\n\r\n// Saving state\r\n\r\nexport function* watchSaveState() {\r\n    yield throttle(SAVE_STATE_THROTTLE, saveStateActions, saveState);\r\n}\r\n\r\nexport function* saveState() {\r\n    const savedState = yield select(selectSavedState);\r\n\r\n    yield call([localStorageService, localStorageService.setItem],\r\n        STATE_KEY,\r\n        savedState)\r\n}\r\n\r\nexport const saveStateAppSagas = [\r\n    watchSaveState(),\r\n    watchRehydrateState()\r\n];\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nexport * from './movies/actions';\r\nexport * from './sort-by/actions';\r\nexport * from './search-by/actions';\r\n\r\n\r\nexport const init = createAction('INIT');","import { all, put, take } from 'redux-saga/effects';\r\n\r\nimport { moviesSagas } from './movies/sagas';\r\nimport { saveStateAppSagas } from './saved-state/sagas';\r\nimport { getType } from 'typesafe-actions';\r\nimport { init } from './actions';\r\nimport { rehydrateState, rehydrateStateDone } from './saved-state/actions';\r\n\r\n/**\r\n * Rehydrate store\r\n */\r\nexport function* watchInit() {\r\n    yield take(getType(init));\r\n\r\n    yield put(rehydrateState());\r\n}\r\n\r\n/**\r\n * Act when store is initialized\r\n */\r\nexport function* watchInitDone() {\r\n    yield take(getType(rehydrateStateDone));\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        ...moviesSagas,\r\n        ...saveStateAppSagas,\r\n        watchInit(),\r\n        watchInitDone()\r\n    ]);\r\n}\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { createHashHistory, History } from 'history';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport reducers from './reducers';\r\nimport rootSaga from './sagas';\r\n\r\nexport const appHistory = createHashHistory();\r\n\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware: any[] = [sagaMiddleware, routerMiddleware(appHistory)];\r\n\r\nexport const rootReducer = (history: History) =>\r\n    combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\nconst composeEnhancer: typeof compose =\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer(appHistory),\r\n    composeEnhancer(applyMiddleware(...middleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React, { FunctionComponent, ReactNode, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport cn from 'classnames';\r\nimport { push } from 'connected-react-router';\r\n\r\nimport {\r\n    fetchFavoriteMovie,\r\n    fetchMovieById,\r\n    removeMovieFromFavorites,\r\n    setCurrentMovieId\r\n} from '../../store/movies/actions';\r\nimport { MovieItem } from '../../store/movies/reducer';\r\nimport {\r\n    selectFavMoviesQuantity,\r\n    selectFavorites, selectIsFavMoviesNearRelease,\r\n    selectIsLoading,\r\n    selectMovies,\r\n    selectMoviesQuantity\r\n} from '../../store/movies/selectors';\r\nimport { FilmCard } from './film-card';\r\nimport { GlobalState } from '../../store/interfaces';\r\nimport { Icon, Loader, SortBy } from '..';\r\nimport { selectSortBy } from '../../store/sort-by/selectors';\r\nimport { selectCurrentPath } from '../../store/router/selectors';\r\n\r\nimport './movies-list.scss';\r\n\r\ninterface MoviesListProps {\r\n    movies: MovieItem[];\r\n    favorites: MovieItem[];\r\n    isLoading: boolean;\r\n    sortBy: string;\r\n    pathname: string;\r\n    moviesQuantity: number;\r\n    favMoviesQuantity: number;\r\n    isFavMoviesNearRelease: boolean;\r\n\r\n    push(path: string): void;\r\n    fetchMovieById(): void\r\n    setCurrentMovieId(id: string): void;\r\n    fetchFavoriteMovie(): void;\r\n    removeMovieFromFavorites(id: string): void;\r\n}\r\n\r\nenum Tabs {\r\n    movies = 'movies',\r\n    favorites = 'favMovies'\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    movies: selectMovies(state),\r\n    favorites: selectFavorites(state),\r\n    isLoading: selectIsLoading(state),\r\n    sortBy: selectSortBy(state),\r\n    pathname: selectCurrentPath(state),\r\n    moviesQuantity: selectMoviesQuantity(state),\r\n    favMoviesQuantity: selectFavMoviesQuantity(state),\r\n    isFavMoviesNearRelease: selectIsFavMoviesNearRelease(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovieById,\r\n    setCurrentMovieId,\r\n    removeMovieFromFavorites,\r\n    fetchFavoriteMovie,\r\n    push\r\n};\r\n\r\nconst MoviesList: FunctionComponent<MoviesListProps> = (props: MoviesListProps) => {\r\n    const { t } = useTranslation();\r\n    const state: string = Tabs.movies;\r\n    const [tab, setActiveTab] = useState(state);\r\n    const {\r\n        movies,\r\n        push,\r\n        favorites,\r\n        fetchMovieById,\r\n        removeMovieFromFavorites,\r\n        setCurrentMovieId,\r\n        isLoading,\r\n        fetchFavoriteMovie,\r\n        pathname,\r\n        favMoviesQuantity,\r\n        moviesQuantity,\r\n        isFavMoviesNearRelease\r\n    } = props;\r\n\r\n    const isSearchResultsTab: boolean = tab === Tabs.movies;\r\n    const isFavoritesTab: boolean = tab === Tabs.favorites;\r\n    const isFavoritesAvailable: boolean = favorites.length > 0;\r\n    const isDetailedPage: boolean = pathname.includes('movie');\r\n\r\n    const fetchMovie = (e: any) => {\r\n        setCurrentMovieId(e.target.id);\r\n        fetchMovieById();\r\n        push(`/movie/:${ e.target.id }`);\r\n    };\r\n\r\n    const manageFavorites = (e: any) => {\r\n        const movieID = e.target.id;\r\n        const isFavoritesExist: boolean = favorites.some(\r\n            favorite => favorite.id === parseInt(movieID, 10)\r\n        );\r\n\r\n        setCurrentMovieId(e.target.id);\r\n        !isFavoritesExist\r\n            ? fetchFavoriteMovie()\r\n            : removeMovieFromFavorites(movieID);\r\n    };\r\n\r\n    const handleTabs = (e: any) => setActiveTab(e.target.id);\r\n\r\n    const getList = (moviesList: MovieItem[]): ReactNode => {\r\n        return (\r\n            <div className='list'>\r\n                {\r\n                    isLoading\r\n                        ? <Loader/>\r\n                        : moviesList.map(\r\n                        movie => (\r\n                            <FilmCard\r\n                                key={ movie.id }\r\n                                isFavoritesTab={ isFavoritesTab }\r\n                                movie={ movie }\r\n                                onPosterClick={ fetchMovie }\r\n                                onStarClick={ manageFavorites }\r\n                                favorites={ favorites }/>\r\n                        )\r\n                        )\r\n                }\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const sortBy: ReactNode = !isDetailedPage && <SortBy tab={ tab }/>;\r\n\r\n    const favTab: ReactNode = isFavoritesAvailable && (\r\n        <span className={ cn('btn', { 'active-button': isFavoritesTab }) }\r\n              id={ Tabs.favorites }\r\n              onClick={ handleTabs }>\r\n                    { t('favorites') } { favMoviesQuantity }\r\n            { isFavMoviesNearRelease && <Icon className='fav-bell' iconPrefix='fas' icon='bell'/> }\r\n        </span>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <>\r\n                <div className='nav-bar'>\r\n                    <span className={ cn('btn', { 'active-button': isSearchResultsTab }) }\r\n                          id={ Tabs.movies }\r\n                          onClick={ handleTabs }>\r\n                    { t('searchResults') } { moviesQuantity }\r\n                    </span>\r\n                    { favTab }\r\n                </div>\r\n                { sortBy }\r\n            </>\r\n            <div className={ cn('search-results columns', { 'search-results-detailed': isDetailedPage }) }>\r\n                { isSearchResultsTab && getList(movies) }\r\n                { isFavoritesTab && getList(favorites) }\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MoviesList);\r\n","import React, { FunctionComponent } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport { Languages } from '../../services';\r\nimport { setLanguage } from '../../store/language/actions';\r\nimport { selectLanguage } from '../../store/language/selectors';\r\nimport { selectIsLoading } from '../../store/movies/selectors';\r\nimport { GlobalState } from '../../store/interfaces';\r\n\r\nimport './lang-panel.scss';\r\n\r\ninterface LangPanelProps {\r\n    language: string;\r\n    isLoading: boolean;\r\n\r\n    setLanguage(language: string): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    language: selectLanguage(state),\r\n    isLoading: selectIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = { setLanguage };\r\n\r\nconst LangPanel: FunctionComponent<LangPanelProps> = (props: LangPanelProps) => {\r\n    const { language, setLanguage, isLoading } = props;\r\n    const { t } = useTranslation();\r\n\r\n    const changeLanguage = (e: any) => {\r\n        if (e.target.id !== language && !isLoading) {\r\n            setLanguage(e.target.id);\r\n            window.location.reload();\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className='lang-panel row'>\r\n            <span id={ Languages.en }\r\n                  onClick={ changeLanguage }\r\n                  className={ cn('not-active', { 'active': language === 'en-US' }) }>{ t('header.eng') }</span>\r\n            <span id={ Languages.ru }\r\n                  onClick={ changeLanguage }\r\n                  className={ cn('not-active', { 'active': language === 'ru-RU' }) }>{ t('header.rus') }</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(LangPanel);\r\n","import React, { FunctionComponent } from 'react';\r\nimport cn from 'classnames';\r\nimport moment from 'moment';\r\n\r\nimport { MovieItem } from '../../store/movies/reducer';\r\nimport { FavoriteIcon } from '..';\r\n\r\nimport './film-card.scss';\r\n\r\ninterface FilmCardProps {\r\n    movie: MovieItem;\r\n    favorites: MovieItem[];\r\n    isFavoritesTab: boolean;\r\n\r\n    onPosterClick(e: any): void;\r\n    onStarClick(id: string): void;\r\n}\r\n\r\nexport const FilmCard: FunctionComponent<FilmCardProps> = (props: FilmCardProps) => {\r\n    const { onStarClick, movie, favorites, onPosterClick, isFavoritesTab } = props;\r\n    const { id, title, genres, posterPath, releaseDate } = movie;\r\n\r\n    const isReleaseCurrentYear: boolean =\r\n        moment(releaseDate).toDate().getFullYear() === moment().toDate().getFullYear();\r\n    const releaseWarn: string = isFavoritesTab && isReleaseCurrentYear ? 'release this year' : '';\r\n\r\n    return (\r\n        <div className='film-card'>\r\n            <img className='film-card__poster'\r\n                 id={ id!.toString() }\r\n                 src={ posterPath }\r\n                 alt={ title }\r\n                 onClick={ onPosterClick }/>\r\n            <div className='film-card__header'>\r\n                <span className='film-card__header__title'>{ title }</span>\r\n                <span title={ releaseWarn }\r\n                      className={ cn('', { 'release-soon': isFavoritesTab && isReleaseCurrentYear }) }>\r\n                    { releaseDate!.slice(0, 4) }\r\n                </span>\r\n            </div>\r\n            <div className='film-card__footer'>\r\n                <span className='film-card__genres'>{ genres!.join(' & ') }</span>\r\n                <FavoriteIcon id={ movie.id! }\r\n                              favorites={ favorites }\r\n                              manageFavorites={ onStarClick }/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nimport { GlobalState } from '../interfaces';\r\n\r\nconst state = (state: GlobalState) => state;\r\n\r\nexport const selectSortBy = createSelector(\r\n    state,\r\n    (state) => state.sortBy\r\n);\r\n","import React, { FunctionComponent, ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport cn from 'classnames';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { GlobalState } from '../../store/interfaces';\r\nimport { fetchMovies } from '../../store/movies/actions';\r\nimport { setSearchLimit } from '../../store/search-limit/actions';\r\nimport { selectSearchLimit } from '../../store/search-limit/selectors';\r\n\r\nimport './results-amount.scss';\r\n\r\ninterface ResultsAmountProps {\r\n    searchLimit: string;\r\n    className?: string\r\n\r\n    setSearchLimit(limit: string): void;\r\n    fetchMovies(): void;\r\n}\r\n\r\nexport enum Amount {\r\n    ten = '10',\r\n    twenty = '20',\r\n    thirty = '30',\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    searchLimit: selectSearchLimit(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setSearchLimit,\r\n    fetchMovies\r\n};\r\n\r\nconst ResultsAmount: FunctionComponent<ResultsAmountProps> =\r\n    (props: ResultsAmountProps) => {\r\n        const { t } = useTranslation();\r\n        const { setSearchLimit, fetchMovies, searchLimit } = props;\r\n\r\n        const setAmountItems = (e: any) => searchLimit !== e.target.id && setSearchLimit(e.target.id) && fetchMovies();\r\n\r\n        const getSingleControl = (content: string): ReactNode => {\r\n            const { searchLimit } = props;\r\n\r\n            return (\r\n                <span id={ content }\r\n                      onClick={ setAmountItems }\r\n                      className={ cn('single-control', { 'single-control-active': searchLimit === content }) }>\r\n                { content }\r\n            </span>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <div className={ `results-amount ${ props.className }` }>\r\n                <span className='amount-title'>{ t('home.search.resultsOnPage') }</span>\r\n                { getSingleControl(Amount.ten) }\r\n                { getSingleControl(Amount.twenty) }\r\n                { getSingleControl(Amount.thirty) }\r\n            </div>\r\n        );\r\n    };\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ResultsAmount);\r\n","import React, { FunctionComponent, ReactNode } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\nimport cn from 'classnames';\r\n\r\nimport { GlobalState } from '../../store/interfaces';\r\nimport { sortByDate, sortByRating } from '../../store/movies/actions';\r\nimport { setSortBy } from '../../store/sort-by/actions';\r\nimport { SortByEnum } from '../../store/sort-by/reducer';\r\nimport { Icon } from '..';\r\n\r\nimport './sort-by.scss';\r\n\r\ninterface SortByProps {\r\n    sortBy: string;\r\n    tab: string;\r\n\r\n    setSortBy(payload: string): void;\r\n    sortByRating(tab: string): void;\r\n    sortByDate(tab: string): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    sortBy: state.sortBy\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setSortBy,\r\n    sortByRating,\r\n    sortByDate\r\n};\r\n\r\nconst SortBy: FunctionComponent<SortByProps> = (props: SortByProps) => {\r\n    const { t } = useTranslation();\r\n    const { setSortBy, sortByRating, sortByDate, tab } = props;\r\n\r\n    const onSetSortBy = (e: any) => {\r\n        if(e.target.id !== props.sortBy) {\r\n            e.target.id === SortByEnum.Rating\r\n                ? sortByRating(tab)\r\n                : sortByDate(tab);\r\n            setSortBy(e.target.id);\r\n        }\r\n    };\r\n\r\n    const setActiveLink = (sortBy: string) => sortBy === props.sortBy;\r\n\r\n    return (\r\n        <div className='sort-by row'>\r\n            <span>{ t('home.search.sortBy') }</span>\r\n            <Icon className='sort-icon'\r\n                  iconPrefix='fas'\r\n                  icon='sort'/>\r\n            <span id='date'\r\n                  className={ cn('link', { 'active-link': setActiveLink(SortByEnum.Date) }) }\r\n                  onClick={ onSetSortBy }>\t&nbsp;{ t('home.search.releaseDate') }</span>\r\n            <span id='rating'\r\n                  className={ cn('link', { 'active-link': setActiveLink(SortByEnum.Rating) }) }\r\n                  onClick={ onSetSortBy }>\t&nbsp;{ t('home.search.rating') }</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SortBy);\r\n","import React from 'react';\r\n\r\nimport './loader.scss'\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className='loading-div'>\r\n            <span className='loading'/>\r\n        </div>\r\n    );\r\n};\r\n","import React, { FunctionComponent, ReactNode } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport { Icon, LangPanel } from '../index';\r\n\r\nimport './header.scss';\r\n\r\ninterface HeaderProps {\r\n    pathname: string;\r\n\r\n    push(path: string): void;\r\n}\r\n\r\nexport const Header: FunctionComponent<HeaderProps> = (props: HeaderProps) => {\r\n    const { t } = useTranslation();\r\n    const toMainPage = () => props.push('/');\r\n    const isDetailedPage: boolean = props.pathname.includes('movie');\r\n\r\n    const backIcon: ReactNode = isDetailedPage && (\r\n        <Icon icon='chevron-circle-left'\r\n              iconPrefix='fa'\r\n              className='back link'\r\n              onIconClick={ toMainPage }/>\r\n    );\r\n\r\n    return (\r\n        <div className='header row'>\r\n            <div className='left'>\r\n                { backIcon }\r\n                <span className='title'>{ t('header.title') }</span>\r\n            </div>\r\n            <LangPanel/>\r\n        </div>\r\n    );\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\n\r\ntype ButtonType = 'button' | 'reset' | 'submit';\r\n\r\ninterface ButtonProps {\r\n    className?: string;\r\n    name?: string;\r\n    onClick?: any;\r\n    value?: string;\r\n    type: ButtonType;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const Button: FunctionComponent<ButtonProps> = (props: ButtonProps) => {\r\n    return (\r\n        <button { ...props } >\r\n            { props.name }\r\n        </button>\r\n    );\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\nimport { IconName } from '@fortawesome/fontawesome-common-types';\r\n\r\nexport type IconPrefix = | 'fa' | 'fas' | 'far';\r\n\r\ninterface IconProps {\r\n    className?: string;\r\n    id?: string;\r\n    title?: string;\r\n    icon: IconName;\r\n    iconPrefix: IconPrefix;\r\n    onIconClick?: any;\r\n}\r\n\r\nexport const Icon: FunctionComponent<IconProps> = (props: IconProps) => {\r\n    return (\r\n        <i className={ `${ props.className }  ${ props.iconPrefix } fa-${ props.icon }` }\r\n           title={ props.title }\r\n           id={ props.id }\r\n           onClick={ props.onIconClick }/>\r\n    );\r\n};\r\n","import React, { FunctionComponent } from 'react';\r\nimport { Icon, IconPrefix } from '..';\r\nimport cn from 'classnames';\r\n\r\nimport { MovieItem } from '../../store/movies/reducer';\r\n\r\ninterface FavoriteIconProps {\r\n    id?: number;\r\n    favorites: MovieItem[];\r\n\r\n    manageFavorites(e: any): void;\r\n}\r\n\r\nexport const FavoriteIcon: FunctionComponent<FavoriteIconProps> = (props: FavoriteIconProps) => {\r\n    const { id, manageFavorites, favorites } = props;\r\n    const isMovieInFavorites: boolean = favorites.some(movie => movie.id === props.id);\r\n    const iconPrefix: IconPrefix = isMovieInFavorites\r\n        ? 'fas'\r\n        : 'far';\r\n\r\n    return (\r\n        <Icon className={ cn('favorite', { 'fav': isMovieInFavorites }) }\r\n              id={ id!.toString() }\r\n              iconPrefix={ iconPrefix } icon='star'\r\n              onIconClick={ manageFavorites }/>\r\n    );\r\n};\r\n","import React, { FunctionComponent, useState } from 'react';\r\nimport { useTranslation } from 'react-i18next';\r\nimport { connect } from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport { fetchMovies, setQueryString } from '../../store/movies/actions';\r\nimport { MovieItem } from '../../store/movies/reducer';\r\nimport { selectFavorites, selectMoviesQuantity } from '../../store/movies/selectors';\r\nimport { setSearchBy } from '../../store/search-by/actions';\r\nimport { appHistory } from '../../store/store';\r\nimport { Button, ResultsAmount } from '../../components';\r\nimport { GlobalState } from '../../store/interfaces';\r\n\r\nimport './search-component.scss';\r\n\r\ninterface SearchComponentProps {\r\n    searchBy: string,\r\n    isLoading: boolean;\r\n    favorites: MovieItem[];\r\n\r\n    fetchMovies(): void,\r\n    setSearchBy(payload: string): void,\r\n    setQueryString(payload: string): void\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    searchBy: state.searchBy,\r\n    favorites: selectFavorites(state),\r\n    isLoading: state.moviesState.isLoading,\r\n    moviesCount: selectMoviesQuantity(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovies,\r\n    setSearchBy,\r\n    setQueryString\r\n};\r\n\r\nconst SearchComponent: FunctionComponent<SearchComponentProps> = (props: SearchComponentProps) => {\r\n    const { setQueryString, fetchMovies, isLoading, setSearchBy } = props;\r\n    const { t } = useTranslation();\r\n    const state: string = '';\r\n\r\n    const [value, setValue] = useState(state);\r\n\r\n    const handleChange = (e: any) => setValue(e.target.value);\r\n\r\n    const submitEvent = (e: any) => e.key === 'Enter' && handleSubmit();\r\n\r\n    const onSetSearchBy = (e: any) => setSearchBy(e.target.value);\r\n\r\n    const setActiveBtn = (searchBy: string) => searchBy === props.searchBy;\r\n\r\n    const handleSubmit = () => {\r\n        appHistory.push(`/search/:${ value }`);\r\n        setQueryString(value);\r\n        fetchMovies();\r\n    };\r\n\r\n    return (\r\n        <div className='search-component'>\r\n            <div className='search-form'>\r\n                <input className='search-input'\r\n                       type='search'\r\n                       placeholder={ t('home.search.find') }\r\n                       onKeyPress={ submitEvent }\r\n                       value={ value }\r\n                       onChange={ handleChange }/>\r\n                <Button type='button'\r\n                        className={ cn('search-button', { 'disabled-btn': isLoading }) }\r\n                        onClick={ handleSubmit }\r\n                        disabled={ isLoading }\r\n                        name={ t('home.search.search') }/>\r\n            </div>\r\n            <div className='search-by'>\r\n                <span>{ t('home.search.searchBy') }:</span>\r\n                <Button value={ 'title' }\r\n                        onClick={ onSetSearchBy }\r\n                        type='button'\r\n                        disabled={ setActiveBtn('title') }\r\n                        className={ cn('btn', { 'active-button': setActiveBtn('title') }) }\r\n                        name={ t('home.search.title') }/>\r\n                <Button value={ 'genres' }\r\n                        onClick={ onSetSearchBy }\r\n                        type='button'\r\n                        disabled={ setActiveBtn('genres') }\r\n                        className={ cn('btn', { 'active-button': setActiveBtn('genres') }) }\r\n                        name={ t('home.search.genres') }/>\r\n            </div>\r\n            <ResultsAmount className='amount'/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchComponent);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { fetchMovies } from '../../store/movies/actions';\r\nimport { selectIsLoading, selectMovies } from '../../store/selectors';\r\nimport { MovieItem } from '../../store/movies/reducer';\r\nimport SearchComponent from './search-component';\r\nimport { GlobalState } from '../../store/interfaces';\r\n\r\ninterface HomeProps {\r\n    movies: MovieItem[];\r\n    isLoading: boolean;\r\n\r\n    fetchMovies(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    movies: selectMovies(state),\r\n    isLoading: selectIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovies\r\n};\r\n\r\nconst Home = (props: HomeProps) => {\r\n    const { fetchMovies, movies, isLoading } = props;\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [!movies]);\r\n\r\n    // const searchResult: ReactNode = (\r\n    //     movies.length\r\n    //         ? <SearchResult movies={ movies }/>\r\n    //         : < div className='no-films-found'><h1> No films found</h1></div>\r\n    // );\r\n\r\n    // const content: ReactNode = (\r\n    //     isLoading\r\n    //         ? <Loader/>\r\n    //         : searchResult\r\n    // );\r\n\r\n    return (\r\n        <div>\r\n            <SearchComponent/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);\r\n","import React, { FunctionComponent } from 'react';\r\nimport cn from 'classnames';\r\nimport { Icon } from '../../components';\r\n\r\ninterface RatingProps {\r\n    voteAverage?: number;\r\n    voteCount?: number;\r\n    title?: string;\r\n}\r\n\r\nexport const Rating: FunctionComponent<RatingProps> = (props: RatingProps) => {\r\n    const { voteAverage, voteCount, title } = props;\r\n\r\n    const setPaddingForRating = (rating: any) => {\r\n        return Number.isInteger(rating);\r\n    };\r\n\r\n    return (\r\n        <div className='rating-tagline'>\r\n            <span className={ cn('rating',\r\n                {\r\n                    'integer-border ': setPaddingForRating(voteAverage),\r\n                    'fractional-border': !setPaddingForRating(voteAverage)\r\n                }) }>\r\n            { voteAverage }\r\n            </span>\r\n            <Icon iconPrefix='fa'\r\n                  title={ title }\r\n                  icon='thumbs-up'/>\r\n            <span>{ voteCount }</span>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nimport {\r\n    selectCurrentMovie,\r\n    selectFavorites\r\n} from '../../store/movies/selectors';\r\nimport { MovieItem } from '../../store/movies/reducer';\r\nimport {\r\n    fetchFavoriteMovieSuccess,\r\n    removeMovieFromFavorites\r\n} from '../../store/movies/actions';\r\nimport { GlobalState } from '../../store/interfaces';\r\nimport { FavoriteIcon } from '../../components';\r\nimport { Rating } from './rating';\r\n\r\nimport './detailed-info.scss';\r\n\r\ninterface DetailedInfoProps {\r\n    favorites: MovieItem[];\r\n    currentMovie: MovieItem,\r\n\r\n    fetchFavoriteMovieSuccess(movie: MovieItem): void,\r\n    removeMovieFromFavorites(id: string): void\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    currentMovie: selectCurrentMovie(state),\r\n    favorites: selectFavorites(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchFavoriteMovieSuccess,\r\n    removeMovieFromFavorites\r\n};\r\n\r\nconst DetailedInfo = (props: DetailedInfoProps) => {\r\n    const currentMovie: MovieItem = props.currentMovie;\r\n    const { favorites, fetchFavoriteMovieSuccess, removeMovieFromFavorites } = props;\r\n    const { t } = useTranslation();\r\n\r\n    const manageFavorites = () => {\r\n        !favorites.some(favorite => favorite.id === currentMovie.id)\r\n            ? fetchFavoriteMovieSuccess(props.currentMovie)\r\n            : removeMovieFromFavorites(currentMovie.id!.toString());\r\n    };\r\n\r\n    return (\r\n        <div className='detailed-info'>\r\n            <div className='row'>\r\n                <div className='poster-date-duration'>\r\n                    <img src={ currentMovie.posterPath } className='poster' alt={ currentMovie.title }/>\r\n                    <div className='space-btw'>\r\n                        <span\r\n                            className='date'>{ currentMovie.releaseDate && currentMovie.releaseDate!.slice(0, 4) }</span>\r\n                        <span className='duration'>{ currentMovie.runtime } { t('detailed.min') }</span>\r\n                    </div>\r\n                </div>\r\n                <div className='title-vote column'>\r\n                    <div>\r\n                        <span className='title'>{ currentMovie.title }</span>\r\n                        <FavoriteIcon id={ currentMovie.id }\r\n                                      favorites={ favorites }\r\n                                      manageFavorites={ manageFavorites }/>\r\n                    </div>\r\n                    <Rating voteAverage={ currentMovie.voteAverage }\r\n                            title={ t('detailed.voteCount') }\r\n                            voteCount={ currentMovie.voteCount }/>\r\n                    <span className='tagLine'>{ currentMovie.tagLine }</span>\r\n                </div>\r\n            </div>\r\n            <span className='overview'>{ currentMovie.overview }</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DetailedInfo);\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\n\r\nimport { Home, DetailedInfo } from './pages';\r\n\r\nconst routes = (\r\n    <div>\r\n        <Switch>\r\n            <Route exact path='/' component={ Home }/>\r\n            <Route path='/search/:searchQuery' component={ Home }/>\r\n            <Route path='/movie/:id' component={ DetailedInfo }/>\r\n        </Switch>\r\n    </div>\r\n);\r\n\r\nexport default routes;\r\n","import { ConnectedRouter, push } from 'connected-react-router';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { appHistory } from './store/store';\r\nimport routes from './routes';\r\nimport { Header, MoviesList } from './components';\r\nimport { GlobalState } from './store/interfaces';\r\nimport { selectCurrentPath } from './store/router/selectors';\r\n\r\nimport './App.scss';\r\n\r\ninterface AppProps {\r\n    pathname: string;\r\n\r\n    push(path: string): void;\r\n}\r\n\r\nconst App: FunctionComponent<AppProps> = (props: AppProps) => {\r\n    return (\r\n        <div className='app column'>\r\n            <Header push={ props.push } pathname={ props.pathname }/>\r\n            <ConnectedRouter history={ appHistory }>{ routes }</ConnectedRouter>\r\n            <MoviesList/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    (state: GlobalState) => ({ pathname: selectCurrentPath(state) }),\r\n    { push }\r\n)(App);\r\n","import React, { Suspense } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './store/store';\r\nimport App from './App';\r\nimport { init } from './store/actions';\r\nimport { initTranslationService } from './services';\r\nimport { Loader } from './components';\r\n\r\nimport './index.scss';\r\n\r\nconst loader = <Loader/>;\r\n\r\nstore.dispatch(init());\r\ninitTranslationService().init({ lng: store.getState().language });\r\n\r\nReactDOM.render(\r\n    <Provider store={ store }>\r\n        <Suspense fallback={ loader }>\r\n            <App/>\r\n        </Suspense>\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}