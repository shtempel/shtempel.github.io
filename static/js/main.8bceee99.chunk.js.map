{"version":3,"sources":["constants/constants.ts","store/search-by/actions.ts","store/search-by/reducer.ts","store/sort-by/actions.ts","store/sort-by/reducer.ts","store/movies/actions.ts","store/saved-state/actions.ts","store/movies/reducer.ts","store/search-limit/actions.ts","store/search-limit/selectors.ts","components/results-amount-controller/results-amount-controller.tsx","store/search-limit/reducer.ts","store/reducers.ts","store/search-by/selectors.ts","store/movies/selectors.ts","services/local-storage-service.ts","services/movies-service.ts","store/movies/sagas.ts","store/router/selectors.ts","store/saved-state/selectors.ts","store/saved-state/sagas.ts","store/actions.ts","store/sagas.ts","store/store.ts","components/header/header.tsx","components/footer/footer.tsx","components/button/button.tsx","components/sort-by/sort-by.tsx","components/title/title.tsx","components/loader/loader.tsx","components/icon/icon.tsx","components/search-result/film-card.tsx","components/search-result/search-result.tsx","components/favorites/favorites.tsx","pages/home/home.tsx","pages/detailed-info/detailed-info.tsx","routes.tsx","App.tsx","index.tsx"],"names":["common","setSearchBy","createAction","resolve","searchBy","reducer","state","arguments","length","undefined","action","type","getType","actions","payload","setSortBy","sortBy","setQueryString","queryString","setCurrentMovieId","id","fetchMovies","fetchMoviesSuccess","movies","fetchMoviesFail","fetchMovieById","fetchMovieByIdSuccess","currentMovie","fetchMovieByIdFail","sortByRating","sortByDate","fetchFavoriteMovie","fetchFavoriteMovieSuccess","movieItem","fetchFavoriteMovieFail","removeMovieFromFavorites","rehydrateState","rehydrateStateDone","restoreSavedState","savedState","initialState","isFavoriteLoading","isLoading","currentMovieId","favMovies","_action$payload","Object","objectSpread","toConsumableArray","concat","filter","movie","parseInt","sort","a","b","voteAverage","releaseDate","setSearchLimit","limit","selectSearchLimit","createSelector","searchLimit","BASE_URL","Amount","mapDispatchToProps","connect","props","setAmountItems","e","target","getSingleControl","content","react_default","createElement","onClick","className","cn","single-control-active","RESULTS_ON_PAGE","ten","twenty","thirty","reducers","moviesState","movieReducer","sortByReducer","searchByReducer","selectSearchBy","selectMovies","selectIsLoading","selectCurrentMovie","selectMoviesQuantity","selectSearchQuery","selectCurrentMovieId","selectFavorites","service","LocalStorageService","localStorage","classCallCheck","this","createClass","key","value","setItem","JSON","stringify","storageData","getItem","parse","window","MoviesService","searchQuery","axios","get","then","response","data","map","title","posterPath","poster_path","release_date","genres","vote_average","tagLine","tagline","runtime","overview","watchFetchMovies","watchFetchMovieById","watchFetchFavMovie","regenerator_default","wrap","_context","prev","next","throttle","stop","_marked","fetchedMovies","_context2","call","delay","select","sent","moviesService","getMovies","put","t0","_marked2","_context3","_marked3","movieId","fetchedMovie","_context4","getMovieById","_marked4","_context5","_marked5","_context6","_marked6","moviesSagas","selectCurrentPath","router","localization","location","pathname","selectRouterSavedState","selectSavedState","watchRehydrateState","watchSaveState","saveState","saveStateActions","LOCATION_CHANGE","SAVE_STATE_THROTTLE","STATE_KEY","takeEvery","sagas_marked","fetchState","push","sagas_marked2","localStorageService","sagas_marked3","sagas_marked4","saveStateAppSagas","init","watchInit","watchInitDone","rootSaga","take","store_sagas_marked","store_sagas_marked2","all","store_sagas_marked3","history","appHistory","createHashHistory","sagaMiddleware","createSagaMiddleware","middleware","routerMiddleware","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","connectRouter","applyMiddleware","apply","run","favorites","moviesCount","_useState","useState","_useState2","slicedToArray","setValue","handleSubmit","onSetSearchBy","setActiveBtn","title_Title","MAIN_TITLE","FIND_YOUR_MOVIE","onKeyPress","onChange","SEARCH_BY","button_Button","TITLE","disabled","active-button","name","GENRE","SEARCH","Footer","Button","onSetSortBy","setActiveLink","MOVIES_FOUND","SORT_BY","active-link","RELEASE_DATE","RATING","Title","Loader","Icon","iconPrefix","icon","onIconClick","FilmCard","isMovieInFavorites","some","Link","to","toString","src","alt","onPosterClick","slice","join","icon_Icon","fav","onStarClick","fetchMovie","manageFavorites","movieID","isFavoritesExist","favorite","Fragment","film_card_FilmCard","favorites_Favorites","results_amount_controller_results_amount_controller","Favorites","useEffect","searchResult","search_result_search_result","loader_Loader","header_header","sort_by_sort_by","_props$currentMovie","setPaddingForRating","rating","Number","isInteger","integer-border ","fractional-border","routes","Switch","Route","exact","path","component","Home","DetailedInfo","App","lib","footer_Footer","dispatch","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.8bceee99.chunk.js","sourcesContent":["export const BASE_URL = 'http://react-cdp-api.herokuapp.com/movies';\r\n\r\nexport enum common {\r\n    MAIN_TITLE = 'netflixroulette',\r\n    SEARCH = 'search',\r\n    SEARCH_BY = 'search by',\r\n    SORT_BY = 'Sort by',\r\n    FIND_YOUR_MOVIE = 'find your movie',\r\n    TITLE = 'title',\r\n    GENRE = 'genre',\r\n    RELEASE_DATE = 'release date',\r\n    RATING = 'rating',\r\n    MOVIES_FOUND = ' movies found',\r\n    RESULTS_ON_PAGE = 'Show results on page: '\r\n}","import { createAction } from 'typesafe-actions';\r\n\r\nexport const setSearchBy = createAction(\r\n    'SET_SEARCH_BY',\r\n    resolve => (searchBy: string) => resolve(searchBy)\r\n);\r\n","import { Reducer } from 'redux';\r\nimport { ActionType, getType } from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\n\r\nexport type SearchByAction = ActionType<typeof actions>;\r\n\r\nexport const initialState: string = 'title';\r\n\r\nconst reducer: Reducer<string, SearchByAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSearchBy): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nexport const setSortBy = createAction(\r\n    'SET_SORT_BY',\r\n    resolve => (sortBy: string) => resolve(sortBy)\r\n);\r\n","import { Reducer } from 'redux';\r\nimport { ActionType, getType } from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\n\r\nexport type SortByAction = ActionType<typeof actions>;\r\n\r\nexport const initialState: string = 'date';\r\n\r\nconst reducer: Reducer<string, SortByAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSortBy): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import {createAction} from 'typesafe-actions';\r\n\r\nimport {MovieItem} from './reducer';\r\n\r\nexport const setQueryString = createAction(\r\n    'SET_QUERY_STRING',\r\n    resolve => (queryString: string) => resolve(queryString)\r\n);\r\n\r\nexport const setCurrentMovieId = createAction(\r\n    'SET_CURRENT_MOVIE_ID',\r\n    resolve => (id: string) => resolve(id)\r\n);\r\n\r\nexport const fetchMovies = createAction('FETCH_MOVIES');\r\n\r\nexport const fetchMoviesSuccess = createAction(\r\n    'FETCH_MOVIES_SUCCESS',\r\n    resolve => (movies: MovieItem[]) => resolve(movies)\r\n);\r\n\r\nexport const fetchMoviesFail = createAction(\r\n    'FETCH_MOVIES_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const fetchMovieById = createAction('FETCH_MOVIE_BY_ID ');\r\n\r\nexport const fetchMovieByIdSuccess = createAction(\r\n    'FETCH_MOVIE_BY_ID_SUCCESS',\r\n    resolve => (currentMovie: MovieItem) => resolve(currentMovie)\r\n);\r\n\r\nexport const fetchMovieByIdFail = createAction(\r\n    'FETCH_MOVIE_BY_ID_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const sortByRating = createAction('SORT_BY_RATING');\r\n\r\nexport const sortByDate = createAction('SORT_BY_DATE');\r\n\r\nexport const fetchFavoriteMovie = createAction('FETCH_FAVORITE_MOVIE');\r\n\r\nexport const fetchFavoriteMovieSuccess = createAction(\r\n    'FETCH_FAVORITE_MOVIE_SUCCESS',\r\n    resolve => (movieItem: MovieItem) => resolve(movieItem)\r\n);\r\n\r\nexport const fetchFavoriteMovieFail = createAction(\r\n    'FETCH_FAVORITE_MOVIE_FAIL',\r\n    resolve => (payload: Error) => resolve(payload)\r\n);\r\n\r\nexport const removeMovieFromFavorites = createAction(\r\n    'REMOVE_MOVIE_FROM_FAVORITES',\r\n    resolve => (id: string) => resolve(id)\r\n);","import { createAction } from 'typesafe-actions';\r\n\r\nimport { AppSavedState } from '../store';\r\n\r\nexport const rehydrateState = createAction('REHYDRATE_STATE');\r\n\r\nexport const rehydrateStateDone = createAction('REHYDRATE_STATE_DONE');\r\n\r\nexport const restoreSavedState = createAction(\r\n    'RESTORE_SAVED_STATE',\r\n    resolve => (savedState: AppSavedState) => resolve(savedState)\r\n);","import {Reducer} from 'redux';\r\nimport {ActionType, getType} from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\nimport {restoreSavedState} from \"../saved-state/actions\";\r\n\r\nexport interface MovieItem {\r\n    id?: number;\r\n    title?: string;\r\n    posterPath?: string;\r\n    releaseDate?: string;\r\n    genres?: string[];\r\n    voteAverage?: number;\r\n    tagLine?: string;\r\n    runtime?: number;\r\n    overview?: string;\r\n}\r\n\r\nexport interface MoviesState {\r\n    isFavoriteLoading: boolean;\r\n    isLoading: boolean;\r\n    queryString: string;\r\n    currentMovieId: string;\r\n    movies: MovieItem[];\r\n    favMovies: MovieItem[];\r\n    currentMovie: MovieItem;\r\n}\r\n\r\nexport type MoviesAction =\r\n    | ActionType<typeof actions>\r\n    | ActionType<typeof restoreSavedState>;\r\n\r\nexport const initialState: MoviesState = {\r\n    isFavoriteLoading: false,\r\n    isLoading: false,\r\n    currentMovieId: '',\r\n    queryString: '',\r\n    movies: [],\r\n    favMovies: [],\r\n    currentMovie: {}\r\n};\r\n\r\nconst reducer: Reducer<MoviesState, MoviesAction> = (\r\n    state = initialState,\r\n    action\r\n) => {\r\n    switch (action.type) {\r\n\r\n        case getType(restoreSavedState): {\r\n            const {movies, currentMovie, favMovies} = action.payload;\r\n            return {\r\n                ...state,\r\n                movies: movies || [],\r\n                currentMovie: currentMovie || {},\r\n                favMovies: favMovies || []\r\n            }\r\n        }\r\n\r\n        case getType(actions.setQueryString): {\r\n            return {\r\n                ...state,\r\n                queryString: action.payload\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchFavoriteMovieSuccess): {\r\n            return {\r\n                ...state,\r\n                favMovies: [...state.favMovies, action.payload],\r\n                isFavoriteLoading: false\r\n            }\r\n        }\r\n\r\n        case getType(actions.removeMovieFromFavorites): {\r\n            return {\r\n                ...state,\r\n                favMovies: [\r\n                    ...state.favMovies.filter(movie => movie.id !== parseInt(action.payload))\r\n                ]\r\n            }\r\n        }\r\n\r\n        case getType(actions.setCurrentMovieId): {\r\n            return {\r\n                ...state,\r\n                currentMovieId: action.payload\r\n            }\r\n        }\r\n\r\n        case getType(actions.fetchFavoriteMovie): {\r\n            return {\r\n                ...state,\r\n                isFavoriteLoading: true\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovies):\r\n        case getType(actions.fetchMovieById): {\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMoviesSuccess): {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                movies: action.payload\r\n            };\r\n        }\r\n        case getType(actions.fetchFavoriteMovieFail): {\r\n            return {\r\n                ...state,\r\n                isFavoriteLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovieByIdFail):\r\n        case getType(actions.fetchMoviesFail): {\r\n            return {\r\n                ...state,\r\n                isLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.fetchMovieByIdSuccess): {\r\n            return {\r\n                ...state,\r\n                currentMovie: action.payload,\r\n                isLoading: false\r\n            };\r\n        }\r\n\r\n        case getType(actions.sortByRating): {\r\n            return {\r\n                ...state,\r\n                movies: state.movies.sort((a: any, b: any) => {\r\n                    return a.voteAverage - b.voteAverage;\r\n                })\r\n            };\r\n        }\r\n\r\n        case getType(actions.sortByDate): {\r\n            return {\r\n                ...state,\r\n                movies: state.movies.sort((a: any, b: any) => {\r\n                    return parseInt(b.releaseDate) - parseInt(a.releaseDate);\r\n                })\r\n            };\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nexport const setSearchLimit= createAction(\r\n    'SET_SEARCH_LIMIT',\r\n    resolve => (limit: string) => resolve(limit)\r\n);\r\n","import {createSelector} from 'reselect';\r\n\r\nimport {GlobalState} from '../store';\r\n\r\nconst state = (state: GlobalState) => state;\r\n\r\nexport const selectSearchLimit = createSelector(\r\n    state,\r\n    (state) => state.searchLimit\r\n);\r\n","import React, {ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {setSearchLimit} from '../../store/search-limit/actions';\r\nimport {fetchMovies} from '../../store/movies/actions';\r\nimport {GlobalState} from '../../store/store';\r\nimport {selectSearchLimit} from '../../store/search-limit/selectors';\r\nimport {common} from '../../constants/constants';\r\n\r\nimport './results-amount-controller.scss';\r\n\r\ninterface ResultsAmountControllerProps {\r\n    searchLimit: string;\r\n\r\n    setSearchLimit(limit: string): void;\r\n    fetchMovies(): void;\r\n}\r\n\r\nexport enum Amount {\r\n    ten = '10',\r\n    twenty = '20',\r\n    thirty = '30',\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    searchLimit: selectSearchLimit(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setSearchLimit,\r\n    fetchMovies\r\n};\r\n\r\nconst ResultsAmountController = (props: ResultsAmountControllerProps) => {\r\n    const setAmountItems = (e: any) => {\r\n        const {setSearchLimit, fetchMovies, searchLimit} = props;\r\n\r\n        searchLimit !== e.target.id && setSearchLimit(e.target.id) && fetchMovies();\r\n    };\r\n\r\n    const getSingleControl = (content: string): ReactNode => {\r\n        const {searchLimit} = props;\r\n\r\n        return (\r\n            <span id={content}\r\n                  onClick={setAmountItems}\r\n                  className={cn('single-control', {'single-control-active': searchLimit === content})}>\r\n                {content}\r\n            </span>\r\n        )\r\n    };\r\n\r\n    return (\r\n        <div className='results-amount-controller'>\r\n            <span>{common.RESULTS_ON_PAGE}</span>\r\n            {getSingleControl(Amount.ten)}\r\n            {getSingleControl(Amount.twenty)}\r\n            {getSingleControl(Amount.thirty)}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ResultsAmountController);\r\n","import {Reducer} from 'redux';\r\nimport {ActionType, getType} from 'typesafe-actions';\r\n\r\nimport * as actions from './actions';\r\nimport {Amount} from '../../components/results-amount-controller/results-amount-controller';\r\n\r\nexport type SearchLimitAction = ActionType<typeof actions>;\r\n\r\nexport const initialState: string = Amount.ten;\r\n\r\nconst reducer: Reducer<string, SearchLimitAction> = (\r\n    state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case getType(actions.setSearchLimit): {\r\n            return action.payload;\r\n        }\r\n\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","import searchByReducer from './search-by/reducer';\r\nimport sortByReducer from './sort-by/reducer';\r\nimport movieReducer from './movies/reducer';\r\nimport searchLimitReducer from './search-limit/reducer';\r\n\r\nexport default {\r\n    moviesState: movieReducer,\r\n    sortBy: sortByReducer,\r\n    searchBy: searchByReducer,\r\n    searchLimit: searchLimitReducer\r\n};\r\n","import { createSelector } from 'reselect';\r\n\r\nimport { GlobalState } from '../store';\r\n\r\nconst state = (state: GlobalState) => state;\r\n\r\nexport const selectSearchBy = createSelector(\r\n    state,\r\n    (state) => state.searchBy\r\n);\r\n","import {createSelector} from 'reselect';\r\n\r\nimport {GlobalState} from '../store';\r\n\r\nexport const moviesState = (state: GlobalState) => state.moviesState;\r\n\r\nexport const selectMovies = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.movies\r\n);\r\n\r\nexport const selectIsLoading = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.isLoading\r\n);\r\n\r\nexport const selectCurrentMovie = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.currentMovie\r\n);\r\n\r\nexport const selectMoviesQuantity = createSelector(\r\n    [selectMovies],\r\n    movies => movies.length\r\n);\r\n\r\nexport const selectSearchQuery = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.queryString\r\n);\r\n\r\nexport const selectCurrentMovieId = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.currentMovieId\r\n);\r\n\r\nexport const selectFavorites = createSelector(\r\n    [moviesState],\r\n    moviesState => moviesState.favMovies\r\n);\r\n","export class LocalStorageService {\r\n    constructor(private localStorage: Storage) {}\r\n\r\n    setItem(key: string, value: object) {\r\n        this.localStorage.setItem(key, JSON.stringify(value));\r\n    }\r\n\r\n    getItem(key: string) {\r\n        const storageData = this.localStorage.getItem(key);\r\n\r\n        return storageData ? JSON.parse(storageData) : null;\r\n    }\r\n}\r\n\r\nconst service = new LocalStorageService(window.localStorage);\r\n\r\nexport default service;","import axios from 'axios';\r\n\r\nimport {BASE_URL} from '../constants/constants';\r\nimport {MovieItem} from \"../store/movies/reducer\";\r\n\r\nexport class MoviesService {\r\n\r\n    getMovies(searchQuery: string, searchBy: string, limit: string) {\r\n        return axios.get(`${BASE_URL}?search=${searchQuery}&searchBy=${searchBy}&limit=${limit}`)\r\n            .then((response): MovieItem[] => {\r\n                return response.data.data.map(\r\n                    (movie: any): MovieItem => {\r\n                        return {\r\n                            title: movie.title,\r\n                            id: movie.id,\r\n                            posterPath: movie.poster_path,\r\n                            releaseDate: movie.release_date,\r\n                            genres: movie.genres,\r\n                            voteAverage: movie.vote_average\r\n                        }\r\n                    }\r\n                )\r\n            })\r\n    }\r\n\r\n    getMovieById(id: number) {\r\n        return axios.get(`${BASE_URL}/${id}`)\r\n            .then((response) => {\r\n                return response.data = {\r\n                    title: response.data.title,\r\n                    id: response.data.id,\r\n                    posterPath: response.data.poster_path,\r\n                    releaseDate: response.data.release_date,\r\n                    genres: response.data.genres,\r\n                    voteAverage: response.data.vote_average,\r\n                    tagLine: response.data.tagline,\r\n                    runtime: response.data.runtime,\r\n                    overview: response.data.overview,\r\n\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nconst service = new MoviesService();\r\n\r\nexport default service;\r\n","import {call, put, select, throttle} from 'redux-saga/effects';\r\nimport {delay} from 'redux-saga';\r\nimport {getType} from 'typesafe-actions';\r\n\r\n\r\nimport * as actions from './actions';\r\nimport {selectSearchBy} from '../search-by/selectors';\r\nimport {selectCurrentMovieId, selectSearchQuery} from './selectors';\r\nimport {selectSearchLimit} from '../search-limit/selectors';\r\nimport {moviesService} from \"../../services\";\r\n\r\nexport function* watchFetchMovies() {\r\n    yield throttle(1000, getType(actions.fetchMovies), fetchMovies);\r\n}\r\n\r\nexport function* fetchMovies() {\r\n    yield call(delay, 1000);\r\n    try {\r\n        const searchQuery = yield select(selectSearchQuery);\r\n        const searchBy = yield select(selectSearchBy);\r\n        const limit = yield select(selectSearchLimit);\r\n        const fetchedMovies = yield call([moviesService, moviesService.getMovies], searchQuery, searchBy, limit);\r\n        yield put(actions.fetchMoviesSuccess(fetchedMovies));\r\n    } catch (error) {\r\n        yield put(actions.fetchMoviesFail(error));\r\n    }\r\n}\r\n\r\nexport function* watchFetchMovieById() {\r\n    yield throttle(1000, getType(actions.fetchMovieById), fetchMovieById);\r\n}\r\n\r\nexport function* fetchMovieById() {\r\n    try {\r\n        const movieId = yield select(selectCurrentMovieId);\r\n        const fetchedMovie = yield call([moviesService, moviesService.getMovieById], movieId);\r\n        yield put(actions.fetchMovieByIdSuccess(fetchedMovie));\r\n    } catch (error) {\r\n        yield put(actions.fetchMovieByIdFail(error));\r\n    }\r\n}\r\n\r\nexport function* watchFetchFavMovie() {\r\n    yield throttle(1000, getType(actions.fetchFavoriteMovie), fetchFavoriteMovie);\r\n}\r\n\r\nexport function* fetchFavoriteMovie() {\r\n    try {\r\n        const movieId = yield select(selectCurrentMovieId);\r\n        const fetchedMovie = yield call([moviesService, moviesService.getMovieById], movieId);\r\n        yield put(actions.fetchFavoriteMovieSuccess(fetchedMovie));\r\n    } catch (error) {\r\n        yield put(actions.fetchFavoriteMovieFail(error));\r\n    }\r\n}\r\n\r\nexport const moviesSagas = [\r\n    watchFetchMovies(),\r\n    watchFetchMovieById(),\r\n    watchFetchFavMovie()\r\n];\r\n","import { createSelector } from 'reselect';\r\nimport {GlobalState} from \"../store\";\r\nimport { RouterSavedState } from './types';\r\n\r\nconst slice = (state: GlobalState) => state.router;\r\n\r\nexport const selectCurrentPath = createSelector(\r\n    [slice],\r\n    localization => localization.location.pathname\r\n);\r\n\r\nexport const selectRouterSavedState = createSelector(\r\n    selectCurrentPath,\r\n    (pathname): RouterSavedState => ({ location: { pathname } })\r\n);","import {createSelector} from 'reselect';\r\nimport {selectRouterSavedState} from \"../router/selectors\";\r\nimport {selectCurrentMovie, selectFavorites, selectMovies} from \"../movies/selectors\";\r\n\r\nexport const selectSavedState = createSelector(\r\n    [selectRouterSavedState, selectCurrentMovie, selectMovies, selectFavorites],\r\n    (router, currentMovie, movies, favMovies) => ({\r\n        router, currentMovie, movies, favMovies\r\n    })\r\n);","import {\r\n    call,\r\n    put,\r\n    select,\r\n    takeEvery,\r\n    throttle\r\n} from 'redux-saga/effects';\r\nimport {getType} from 'typesafe-actions';\r\nimport {LOCATION_CHANGE, push} from 'connected-react-router';\r\n\r\nimport * as actions from './actions';\r\nimport {AppSavedState} from \"../store\";\r\nimport {localStorageService} from \"../../services\";\r\nimport {selectSavedState} from \"./selectors\";\r\nimport {\r\n    fetchFavoriteMovieSuccess,\r\n    fetchMovieByIdSuccess,\r\n    fetchMovies,\r\n    removeMovieFromFavorites\r\n} from \"../movies/actions\";\r\n\r\nexport const saveStateActions: string[] = [\r\n    LOCATION_CHANGE,\r\n    getType(fetchMovieByIdSuccess),\r\n    getType(fetchFavoriteMovieSuccess),\r\n    getType(removeMovieFromFavorites),\r\n    getType(fetchMovies)\r\n];\r\n\r\nconst SAVE_STATE_THROTTLE = 500;\r\nconst STATE_KEY = 'MOVIES_state';\r\n\r\n// Restore state\r\n\r\nexport function* watchRehydrateState() {\r\n    yield takeEvery(getType(actions.rehydrateState), rehydrateState);\r\n}\r\n\r\nexport function* rehydrateState() {\r\n    const state: AppSavedState = yield call(fetchState);\r\n    if (state) {\r\n        if (state.router) {\r\n            yield put(push(state.router.location.pathname))\r\n        }\r\n        yield put(actions.restoreSavedState(state));\r\n    }\r\n\r\n    yield put(actions.rehydrateStateDone());\r\n}\r\n\r\nconst fetchState = () => localStorageService.getItem(STATE_KEY);\r\n\r\n// Saving state\r\n\r\nexport function* watchSaveState() {\r\n    yield throttle(SAVE_STATE_THROTTLE, saveStateActions, saveState);\r\n}\r\n\r\nexport function* saveState() {\r\n    const savedState = yield select(selectSavedState);\r\n\r\n    yield call([localStorageService, localStorageService.setItem],\r\n        STATE_KEY,\r\n        savedState)\r\n}\r\n\r\nexport const saveStateAppSagas = [\r\n    watchSaveState(),\r\n    watchRehydrateState()\r\n];\r\n","import { createAction } from 'typesafe-actions';\r\n\r\nexport * from './movies/actions';\r\nexport * from './sort-by/actions';\r\nexport * from './search-by/actions';\r\n\r\n\r\nexport const init = createAction('INIT');","import {all, put, take} from 'redux-saga/effects';\r\n\r\nimport {moviesSagas} from './movies/sagas';\r\nimport {saveStateAppSagas} from './saved-state/sagas';\r\nimport {getType} from \"typesafe-actions\";\r\nimport {init} from \"./actions\";\r\nimport {rehydrateState, rehydrateStateDone} from \"./saved-state/actions\";\r\n\r\n/**\r\n * Rehydrate store\r\n */\r\nexport function* watchInit() {\r\n    yield take(getType(init));\r\n\r\n    yield put(rehydrateState());\r\n}\r\n\r\n/**\r\n * Act when store is initialized\r\n */\r\nexport function* watchInitDone() {\r\n    yield take(getType(rehydrateStateDone));\r\n}\r\n\r\nexport default function* rootSaga() {\r\n    yield all([\r\n        ...moviesSagas,\r\n        ...saveStateAppSagas,\r\n        watchInit(),\r\n        watchInitDone()\r\n    ]);\r\n}\r\n","import { applyMiddleware, combineReducers, compose, createStore } from 'redux';\r\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\r\nimport { createHashHistory, History } from 'history';\r\nimport createSagaMiddleware from 'redux-saga';\r\n\r\nimport {MovieItem, MoviesState} from './movies/reducer';\r\nimport reducers from './reducers';\r\nimport rootSaga from './sagas';\r\nimport {RouterSavedState} from \"./router/types\";\r\n\r\nexport interface Router {\r\n    action: string;\r\n    location: {\r\n        hash: string;\r\n        pathname: string;\r\n        search: string;\r\n        state: any;\r\n    };\r\n}\r\n\r\nexport interface AppSavedState {\r\n    router?: RouterSavedState;\r\n    favMovies?: MovieItem[];\r\n    currentMovie?: MovieItem;\r\n    movies?: MovieItem[];\r\n}\r\n\r\nexport interface GlobalState extends AppSavedState{\r\n    moviesState: MoviesState;\r\n    searchBy: string;\r\n    sortBy: string;\r\n    searchLimit: string;\r\n    router: Router\r\n}\r\n\r\nexport const appHistory = createHashHistory();\r\n\r\nexport const sagaMiddleware = createSagaMiddleware();\r\n\r\nconst middleware: any[] = [sagaMiddleware, routerMiddleware(appHistory)];\r\n\r\nconst rootReducer = (history: History) =>\r\n    combineReducers({\r\n        ...reducers,\r\n        router: connectRouter(history)\r\n    });\r\n\r\nconst composeEnhancer: typeof compose =\r\n    (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(\r\n    rootReducer(appHistory),\r\n    composeEnhancer(applyMiddleware(...middleware))\r\n);\r\n\r\nsagaMiddleware.run(rootSaga);\r\n","import React, {useState} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {common} from '../../constants/constants';\r\nimport {appHistory, GlobalState} from '../../store/store';\r\nimport {fetchMovies, setQueryString, setSearchBy} from '../../store/actions';\r\nimport {Button, Title} from '..';\r\nimport {selectFavorites, selectMoviesQuantity} from '../../store/movies/selectors';\r\n\r\nimport './header.scss';\r\nimport {MovieItem} from \"../../store/movies/reducer\";\r\n\r\nexport interface HeaderProps {\r\n    searchBy: string,\r\n    isLoading: boolean;\r\n    favorites: MovieItem[];\r\n\r\n    fetchMovies(): void,\r\n    setSearchBy(payload: string): void,\r\n    setQueryString(payload: string): void,\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    searchBy: state.searchBy,\r\n    favorites: selectFavorites(state),\r\n    isLoading: state.moviesState.isLoading,\r\n    moviesCount: selectMoviesQuantity(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovies,\r\n    setSearchBy,\r\n    setQueryString\r\n};\r\n\r\nconst Header = (props: HeaderProps) => {\r\n    const {setQueryString, fetchMovies, isLoading, setSearchBy} = props;\r\n    const state: string = '';\r\n    const [value, setValue] = useState(state);\r\n\r\n    const handleChange = (e: any) => {\r\n        setValue(e.target.value);\r\n    };\r\n\r\n    const submitEvent = (e: any) => {\r\n        e.key === 'Enter' && handleSubmit();\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        appHistory.push(`/search/:${value}`);\r\n        setQueryString(value);\r\n        fetchMovies();\r\n    };\r\n\r\n    const onSetSearchBy = (e: any) => {\r\n        setSearchBy(e.target.value);\r\n    };\r\n\r\n    const setActiveBtn = (searchBy: string) => {\r\n        return searchBy === props.searchBy;\r\n    };\r\n\r\n    return <div className='header column'>\r\n        <Title className='header__title' title={common.MAIN_TITLE}/>\r\n        <span className='header__find_your'>{common.FIND_YOUR_MOVIE}</span>\r\n        <input className='header__search-input'\r\n               type='search'\r\n               onKeyPress={submitEvent}\r\n               value={value}\r\n               onChange={handleChange}/>\r\n        <div className='header__controls row'>\r\n            <div className='header__controls__left'>\r\n                <span>{common.SEARCH_BY}</span>\r\n                <Button value={common.TITLE}\r\n                        onClick={onSetSearchBy}\r\n                        type='button'\r\n                        disabled={setActiveBtn(common.TITLE)}\r\n                        className={cn('btn', {'active-button': setActiveBtn(common.TITLE)})}\r\n                        name={common.TITLE}/>\r\n                <Button value={common.GENRE}\r\n                        onClick={onSetSearchBy}\r\n                        type='button'\r\n                        disabled={setActiveBtn(common.GENRE)}\r\n                        className={cn('btn', {'active-button': setActiveBtn(common.GENRE)})}\r\n                        name={common.GENRE}/>\r\n            </div>\r\n            <Button className='header__controls__search-button btn'\r\n                    onClick={handleSubmit}\r\n                    disabled={isLoading}\r\n                    type='submit'\r\n                    name={common.SEARCH}/>\r\n        </div>\r\n    </div>\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Header);","import React from 'react';\r\n\r\nimport {common} from '../../constants/constants';\r\n\r\nimport './footer.scss';\r\n\r\nexport const Footer = () => {\r\n    return (\r\n        <div className='footer'>\r\n            <span>{common.MAIN_TITLE}</span>\r\n        </div>\r\n    )\r\n};\r\n","import React from 'react';\r\n\r\ntype ButtonType = 'button' | 'reset' | 'submit';\r\n\r\ninterface ButtonProps {\r\n    className?: string;\r\n    name?: string;\r\n    onClick?: any;\r\n    value?: string;\r\n    type: ButtonType;\r\n    disabled?: boolean;\r\n}\r\n\r\nexport const Button = (props: ButtonProps) => {\r\n    return (\r\n        <button { ...props } >\r\n            { props.name }\r\n        </button>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {common} from '../../constants/constants';\r\nimport {GlobalState} from '../../store/store';\r\nimport {selectMoviesQuantity} from '../../store/movies/selectors';\r\nimport {setSortBy, sortByDate, sortByRating} from '../../store/actions';\r\n\r\nimport './sort-by.scss';\r\n\r\ninterface SortByProps {\r\n    moviesCount: number;\r\n    sortBy: string;\r\n\r\n    setSortBy(payload: string): void;\r\n    sortByRating(): void;\r\n    sortByDate(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    moviesCount: selectMoviesQuantity(state),\r\n    sortBy: state.sortBy\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    setSortBy,\r\n    sortByRating,\r\n    sortByDate\r\n};\r\n\r\nconst SortBy = (props: SortByProps) => {\r\n    const {moviesCount, setSortBy, sortByDate, sortByRating} = props;\r\n\r\n    const onSetSortBy = (e: any) => {\r\n        e.target.id === 'rating'\r\n            ? sortByRating()\r\n            : sortByDate();\r\n\r\n        setSortBy(e.target.id);\r\n    };\r\n\r\n    const setActiveLink = (sortBy: string) => {\r\n        return sortBy === props.sortBy;\r\n    };\r\n\r\n    return (\r\n        <div className='sort-by row'>\r\n            <span>{moviesCount}{common.MOVIES_FOUND}</span>\r\n            <div className='row sort-by__buttons'>\r\n                <span>{common.SORT_BY}</span>\r\n                <span id='date'\r\n                      className={cn('link', {'active-link': setActiveLink('date')})}\r\n                      onClick={onSetSortBy}>{common.RELEASE_DATE}</span>\r\n                <span id='rating'\r\n                      className={cn('link', {'active-link': setActiveLink('rating')})}\r\n                      onClick={onSetSortBy}>{common.RATING}</span>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SortBy);\r\n","import React from 'react';\r\n\r\ninterface TitleProps {\r\n    className: string;\r\n    title: string;\r\n}\r\n\r\nexport const Title = (props: TitleProps) => {\r\n    return <span { ...props }>{ props.title }</span>;\r\n};\r\n\r\n","import React from 'react';\r\n\r\nimport './loader.scss'\r\n\r\nexport const Loader = () => {\r\n    return (\r\n        <div className='loading-div'>\r\n            <p className='loading'/>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { IconName } from '@fortawesome/fontawesome-common-types';\r\n\r\nexport type IconPrefix = | 'fa' | 'fas' | 'far';\r\n\r\ninterface IconProps {\r\n    className?: string;\r\n    id?: string;\r\n    title?: string;\r\n    icon: IconName;\r\n    iconPrefix: IconPrefix;\r\n    onIconClick?: any;\r\n}\r\n\r\nexport const Icon = (props: IconProps) => {\r\n    return (\r\n        <i className={ `${ props.className }  ${ props.iconPrefix } fa-${ props.icon }` }\r\n           title={props.title}\r\n           id={ props.id }\r\n           onClick={ props.onIconClick }/>\r\n    );\r\n};","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport cn from 'classnames';\r\n\r\nimport {MovieItem} from '../../store/movies/reducer';\r\nimport {Icon} from \"..\";\r\nimport {IconPrefix} from \"../icon/icon\";\r\n\r\ninterface FilmCardProps {\r\n    movie: MovieItem;\r\n    favorites: MovieItem[];\r\n\r\n    onPosterClick(e: any): void;\r\n    onStarClick(id: string): void;\r\n}\r\n\r\nexport const FilmCard = (props: FilmCardProps) => {\r\n    const isMovieInFavorites: boolean = props.favorites.some(movie => movie.id === props.movie.id);\r\n    const iconPrefix: IconPrefix = isMovieInFavorites\r\n        ? 'fas'\r\n        : 'far';\r\n\r\n    return (\r\n        <div className='search-result__movie-card column'>\r\n            <Link to={`/movie/${props.movie.id}`}>\r\n                <img className='search-result__movie-card__poster'\r\n                     id={props.movie.id!.toString()}\r\n                     src={props.movie.posterPath}\r\n                     alt={props.movie.title}\r\n                     onClick={props.onPosterClick}/>\r\n            </Link>\r\n            <div className='search-result__movie-card__header row'>\r\n                <span className='search-result__movie-card__title'>{props.movie.title}</span>\r\n                <span className='search-result__movie-card__date'>{props.movie.releaseDate!.slice(0, 4)}</span>\r\n            </div>\r\n            <div className='search-result__movie-card__header row'>\r\n                <span className='search-result__movie-card__genres'>{props.movie.genres!.join(' & ')}</span>\r\n                <Icon className={cn('search-result__movie-card__favorite', {'fav': isMovieInFavorites})}\r\n                      id={props.movie.id!.toString()}\r\n                      iconPrefix={iconPrefix} icon='star'\r\n                      onIconClick={props.onStarClick}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {MovieItem} from '../../store/movies/reducer';\r\nimport {FilmCard} from './film-card';\r\nimport {Favorites, ResultsAmountController} from '..';\r\nimport {\r\n    fetchFavoriteMovie,\r\n    fetchMovieById,\r\n    removeMovieFromFavorites,\r\n    setCurrentMovieId\r\n} from '../../store/movies/actions';\r\nimport {GlobalState} from \"../../store/store\";\r\nimport {selectFavorites} from \"../../store/movies/selectors\";\r\n\r\nimport './search-result.scss';\r\n\r\ninterface SearchResultProps {\r\n    movies: MovieItem[];\r\n    favorites: MovieItem[];\r\n\r\n    fetchMovieById(): void\r\n    setCurrentMovieId(id: string): void;\r\n    fetchFavoriteMovie(): void;\r\n    removeMovieFromFavorites(id: string): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    favorites: selectFavorites(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovieById,\r\n    setCurrentMovieId,\r\n    fetchFavoriteMovie,\r\n    removeMovieFromFavorites\r\n};\r\n\r\nconst SearchResult = (props: SearchResultProps) => {\r\n    const {\r\n        setCurrentMovieId,\r\n        fetchMovieById,\r\n        movies,\r\n        favorites,\r\n        removeMovieFromFavorites,\r\n        fetchFavoriteMovie,\r\n    } = props;\r\n\r\n    const fetchMovie = (e: any) => {\r\n        setCurrentMovieId(e.target.id);\r\n        fetchMovieById();\r\n    };\r\n\r\n    const manageFavorites = (e: any) => {\r\n        const movieID = e.target.id;\r\n        const isFavoritesExist: boolean = favorites.some(\r\n            favorite => favorite.id === parseInt(movieID, 10)\r\n        );\r\n        setCurrentMovieId(e.target.id);\r\n        !isFavoritesExist\r\n            ? fetchFavoriteMovie()\r\n            : removeMovieFromFavorites(movieID);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='search-result-wrapper row'>\r\n                <div className='search-result row'> {\r\n                    movies.map(\r\n                        movie => (\r\n                            <FilmCard\r\n                                key={movie.id}\r\n                                movie={movie}\r\n                                onPosterClick={fetchMovie}\r\n                                onStarClick={manageFavorites}\r\n                                favorites={favorites}/>\r\n                        )\r\n                    )\r\n                }\r\n                </div>\r\n                <Favorites fetchFavoriteMovie={fetchMovie} favorites={favorites}/>\r\n            </div>\r\n            <ResultsAmountController/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SearchResult);\r\n","import React from 'react';\r\n\r\nimport {MovieItem} from '../../store/movies/reducer';\r\nimport {Link} from \"react-router-dom\";\r\n\r\nimport './favorites.scss';\r\n\r\ninterface FavoritesProps {\r\n    favorites?: MovieItem[];\r\n\r\n    fetchFavoriteMovie(e: any): void;\r\n}\r\n\r\nexport const Favorites = (props: FavoritesProps) => {\r\n    return(\r\n        <div className='favorites'>\r\n            {\r\n                props.favorites && props.favorites.map(favorite => (\r\n                    <div key={favorite.id} className='favorites__item'>\r\n                        <Link to={`/movie/${favorite.id}`}>\r\n                            <img className='favorites__item__poster'\r\n                                 id={favorite.id!.toString()}\r\n                                 src={favorite.posterPath}\r\n                                 alt={favorite.title}\r\n                                 onClick={props.fetchFavoriteMovie}/>\r\n                        </Link>\r\n                    </div>\r\n                ))\r\n            }\r\n        </div>\r\n    );\r\n};","import React, {useEffect, ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\n\r\nimport {GlobalState} from '../../store/store';\r\nimport {fetchMovies} from '../../store/movies/actions';\r\nimport {selectIsLoading, selectMovies} from '../../store/selectors';\r\nimport {Header, SortBy, Loader, SearchResult} from '../../components';\r\nimport {MovieItem} from '../../store/movies/reducer';\r\n\r\ninterface HomeProps {\r\n    movies: MovieItem[];\r\n    isLoading: boolean;\r\n\r\n    fetchMovies(): void;\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    movies: selectMovies(state),\r\n    isLoading: selectIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchMovies\r\n};\r\n\r\nconst Home = (props: HomeProps) => {\r\n    const {fetchMovies, movies, isLoading} = props;\r\n\r\n    useEffect(() => {\r\n        fetchMovies();\r\n    }, [!movies]);\r\n\r\n    const searchResult: ReactNode = (\r\n        movies.length\r\n            ? <SearchResult movies={movies}/>\r\n            : < div className='no-films-found'><h1> No films found</h1></div>\r\n    );\r\n\r\n    const content: ReactNode = (\r\n        isLoading\r\n            ? <Loader/>\r\n            : searchResult\r\n    );\r\n\r\n    return (\r\n        <div>\r\n            <Header/>\r\n            <SortBy/>\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Home);\r\n","import React, {ReactNode} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport cn from 'classnames';\r\n\r\nimport {appHistory, GlobalState} from '../../store/store';\r\nimport {selectCurrentMovie, selectFavorites, selectIsLoading, selectMovies} from '../../store/movies/selectors';\r\nimport {Button, Icon, Loader, SearchResult, Title} from '../../components';\r\nimport {common} from '../../constants/constants';\r\nimport {MovieItem} from '../../store/movies/reducer';\r\n\r\nimport './detailed-info.scss';\r\nimport {IconPrefix} from \"../../components/icon/icon\";\r\nimport {\r\n    fetchFavoriteMovieSuccess,\r\n    removeMovieFromFavorites\r\n} from \"../../store/movies/actions\";\r\n\r\n\r\ninterface DetailedInfoProps {\r\n    favorites: MovieItem[];\r\n    currentMovie: MovieItem,\r\n    movies: MovieItem[];\r\n    isLoading: boolean;\r\n\r\n    fetchFavoriteMovieSuccess(movie: MovieItem): void,\r\n    removeMovieFromFavorites(id: string): void\r\n}\r\n\r\nconst mapStateToProps = (state: GlobalState) => ({\r\n    currentMovie: selectCurrentMovie(state),\r\n    movies: selectMovies(state),\r\n    favorites: selectFavorites(state),\r\n    isLoading: selectIsLoading(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    fetchFavoriteMovieSuccess,\r\n    removeMovieFromFavorites\r\n};\r\n\r\nconst DetailedInfo = (props: DetailedInfoProps) => {\r\n    const {posterPath, title, voteAverage, tagLine, releaseDate, runtime, overview, id} = props.currentMovie;\r\n    const {movies, isLoading, favorites, fetchFavoriteMovieSuccess, removeMovieFromFavorites} = props;\r\n    const isMovieInFavorites: boolean = favorites.some(movie => movie.id === props.currentMovie.id);\r\n    const iconPrefix: IconPrefix = isMovieInFavorites\r\n        ? 'fas'\r\n        : 'far';\r\n    const setPaddingForRating = (rating: any) => {\r\n        return Number.isInteger(rating);\r\n    };\r\n\r\n    const toSearch = () => {\r\n        appHistory.push(`/`);\r\n    };\r\n\r\n    const searchResult: ReactNode = (\r\n        isLoading\r\n            ? <Loader/>\r\n            : <SearchResult movies={movies}/>\r\n    );\r\n    const manageFavorites = () => {\r\n        const isFavoritesExist: boolean = favorites.some(\r\n            favorite => favorite.id === id\r\n        );\r\n        !isFavoritesExist\r\n            ? fetchFavoriteMovieSuccess(props.currentMovie)\r\n            : removeMovieFromFavorites(id!.toString());\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className='detailed-info column'>\r\n                <div className='detailed-info__top row'>\r\n                    <Title className='detailed-info__top__title' title={common.MAIN_TITLE}/>\r\n                    <Button type='button'\r\n                            name={common.SEARCH}\r\n                            className='btn detailed-info__top__to-search'\r\n                            onClick={toSearch}/>\r\n                </div>\r\n                <div className='detailed-info__film row'>\r\n                    <img className='detailed-info__film__poster' src={posterPath} alt={title}/>\r\n                    <div className='detailed-info__film__right column'>\r\n                        <div className='detailed-info__film__right__title-rating row'>\r\n                            <span className='detailed-info__film__right__title-rating__title'>{title}</span>\r\n                            <Icon className={cn('search-result__movie-card__favorite', {'fav': isMovieInFavorites})}\r\n                                  id={id!.toString()}\r\n                                  iconPrefix={iconPrefix} icon='star'\r\n                                  onIconClick={manageFavorites}/>\r\n                            <span className={cn('detailed-info__film__right__title-rating__rating',\r\n                                {\r\n                                    'integer-border ': setPaddingForRating(voteAverage),\r\n                                    'fractional-border': !setPaddingForRating(voteAverage)\r\n                                }\r\n                            )}>\r\n                                {voteAverage}\r\n                                </span>\r\n                        </div>\r\n                        <span className='detailed-info__film__right__tagline'>{tagLine}</span>\r\n                        <div className='detailed-info__film__right__date-runtime row'>\r\n                                <span\r\n                                    className='detailed-info__film__right__date-runtime__date'>\r\n                                    {releaseDate && releaseDate.slice(0, 4)}\r\n                                </span>\r\n                            <span className='detailed-info__film__right__date-runtime__runtime'>\r\n                                    {runtime} min\r\n                                </span>\r\n                        </div>\r\n                        <span className='detailed-info__film__right__overview'>{overview}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {searchResult}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DetailedInfo);\r\n","import React from 'react';\r\nimport { Route, Switch } from 'react-router';\r\n\r\nimport { Home, DetailedInfo } from './pages';\r\n\r\nconst routes = (\r\n    <div>\r\n        <Switch>\r\n            <Route exact path='/' component={ Home }/>\r\n            <Route path='/search/:searchQuery' component={ Home }/>\r\n            <Route path='/movie/:id' component={ DetailedInfo }/>\r\n        </Switch>\r\n    </div>\r\n);\r\n\r\nexport default routes;\r\n","import {ConnectedRouter} from 'connected-react-router';\r\nimport React from 'react';\r\n\r\nimport {Footer} from './components';\r\nimport {appHistory} from './store/store';\r\nimport routes from './routes';\r\n\r\nimport './App.scss';\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <div className='app'>\r\n            <ConnectedRouter history={appHistory}>{routes}</ConnectedRouter>\r\n            <Footer/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport { store } from './store/store';\r\nimport App from './App';\r\nimport { init } from './store/actions';\r\n\r\nimport './index.scss';\r\n\r\nstore.dispatch(init());\r\n\r\nReactDOM.render(\r\n    <Provider store={ store }>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root'));\r\n"],"sourceRoot":""}